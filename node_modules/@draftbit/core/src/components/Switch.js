import * as React from "react";
import { Switch as NativeSwitch, } from "react-native";
import { withTheme } from "../theming";
import FormRow from "./FormRow";
import { COMPONENT_TYPES, GROUPS, createBoolProp, createColorProp, createFieldNameProp, createTextProp, createRowDirectionProp, RowDirection, } from "@draftbit/types";
import { usePrevious } from "../hooks";
function Switch({ value = false, initialValue, disabled, onValueChange, activeTrackColor, inactiveTrackColor, activeThumbColor, inactiveThumbColor, theme, style, ...rest }) {
    const activeTrackThemeColor = activeTrackColor || theme.colors.primary;
    const inactiveTrackThemeColor = inactiveTrackColor || "#EEE";
    const activeThumbThemeColor = activeThumbColor || "#FFF";
    const inactiveThumbThemeColor = inactiveThumbColor || "#FFF";
    const [checked, setChecked] = React.useState(value);
    React.useEffect(() => {
        if (value !== checked) {
            setChecked(value);
        }
    }, [value, checked]);
    const previousInitialValue = usePrevious(initialValue);
    React.useEffect(() => {
        if (initialValue !== previousInitialValue) {
            setChecked(initialValue);
            onValueChange && onValueChange(initialValue);
        }
    }, [initialValue, previousInitialValue, setChecked, onValueChange]);
    return (React.createElement(NativeSwitch, { value: checked, disabled: disabled, trackColor: {
            false: inactiveTrackThemeColor,
            true: activeTrackThemeColor,
        }, thumbColor: value ? activeThumbThemeColor : inactiveThumbThemeColor, 
        // @ts-ignore react-native-web only
        activeThumbColor: activeThumbThemeColor, ios_backgroundColor: inactiveTrackThemeColor, style: style, onValueChange: (bool) => {
            setChecked(bool);
            onValueChange && onValueChange(bool);
        }, ...rest }));
}
function Row({ label = "Label", direction = RowDirection.Row, style, value = false, disabled, onValueChange, activeTrackColor, inactiveTrackColor, activeThumbColor, inactiveThumbColor, theme, ...rest }) {
    const [checked, setChecked] = React.useState(value);
    React.useEffect(() => {
        if (value !== checked) {
            setChecked(value);
        }
    }, [value, checked]);
    return (React.createElement(FormRow, { disabled: disabled, onPress: () => {
            setChecked(!checked);
            onValueChange && onValueChange(!checked);
        }, label: label, direction: direction, style: style, ...rest },
        React.createElement(Switch, { theme: theme, value: checked, disabled: disabled, onValueChange: onValueChange, activeTrackColor: activeTrackColor, inactiveTrackColor: inactiveTrackColor, activeThumbColor: activeThumbColor, inactiveThumbColor: inactiveThumbColor })));
}
const SwitchRow = withTheme(Row);
export { SwitchRow };
export default withTheme(Switch);
export const SEED_DATA = [
    {
        name: "Switch",
        tag: "Switch",
        category: COMPONENT_TYPES.input,
        layout: {},
        props: {
            disabled: createBoolProp({
                label: "Disabled",
                description: "Boolean to handle disabling the switch",
            }),
            fieldName: createFieldNameProp({
                handlerPropName: "onValueChange",
                valuePropName: "value",
                defaultValue: "switchValue",
            }),
            activeTrackColor: createColorProp({
                label: "Active Track Color",
            }),
            inactiveTrackColor: createColorProp({
                label: "Inactive Track Color",
            }),
            activeThumbColor: createColorProp({
                label: "Active Thumb Color",
            }),
            inactiveThumbColor: createColorProp({
                label: "Inactive Thumb Color",
            }),
        },
    },
    {
        name: "Switch Row",
        tag: "SwitchRow",
        category: COMPONENT_TYPES.input,
        layout: {},
        props: {
            label: createTextProp({
                label: "Label",
                description: "Label to show with the checkbox",
                required: true,
                defaultValue: "First Option",
            }),
            direction: createRowDirectionProp(),
            disabled: createBoolProp({
                label: "Disabled",
                description: "Boolean to handle disabling the switch",
                group: GROUPS.data,
            }),
            fieldName: createFieldNameProp({
                handlerPropName: "onValueChange",
                valuePropName: "value",
                defaultValue: "switchValue",
            }),
            activeTrackColor: createColorProp({
                label: "Active Track Color",
            }),
            inactiveTrackColor: createColorProp({
                label: "Inactive Track Color",
            }),
            activeThumbColor: createColorProp({
                label: "Active Thumb Color",
            }),
            inactiveThumbColor: createColorProp({
                label: "Inactive Thumb Color",
            }),
        },
    },
];
