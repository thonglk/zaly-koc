/// <reference types="node" />
import * as React from "react";
import { Animated, TextInput as NativeTextInput, StyleProp, TextInputProps, NativeSyntheticEvent, TextInputChangeEventData, ViewStyle } from "react-native";
import type { Theme } from "../styles/DefaultTheme";
import type { IconSlot } from "../interfaces/Icon";
export declare type Props = {
    type?: "solid" | "underline";
    initialValue?: string;
    disabled?: boolean;
    label?: string;
    error?: boolean;
    leftIconName?: string;
    leftIconMode?: "inset" | "outset";
    onChangeText: (text: string | NativeSyntheticEvent<TextInputChangeEventData>) => void;
    rightIconName?: string;
    assistiveText?: string;
    multiline?: boolean;
    style?: StyleProp<ViewStyle> & {
        height?: number;
    };
    theme: Theme;
    render?: (props: TextInputProps & {
        ref: (c: NativeTextInput) => void;
    }) => React.ReactNode;
} & TextInputProps & IconSlot;
interface State {
    labeled: Animated.Value;
    focused?: boolean;
    placeholder?: string | undefined;
    labelLayout: {
        measured: boolean;
        width: number;
    };
    value?: string;
}
declare class TextField extends React.Component<Props, State> {
    static getDerivedStateFromProps(nextProps: Props, prevState: State): {
        value: string | undefined;
    };
    state: State;
    componentDidMount(): void;
    componentDidUpdate(prevProps: Props, prevState: State): void;
    _timer: NodeJS.Timeout;
    componentWillUnmount(): void;
    _showPlaceholder: () => void;
    _hidePlaceholder: () => void;
    _restoreLabel: () => void;
    _minmizeLabel: () => void;
    _handleFocus: () => void;
    _handleBlur: () => void;
    _handleChangeText: (value: NativeSyntheticEvent<TextInputChangeEventData> | string) => void;
    toggleFocus(): void;
    _root: NativeTextInput | undefined;
    /**
     * @internal
     */
    setNativeProps(args: Props): void | undefined;
    isFocused(): boolean | undefined;
    clear(): void | undefined;
    focus(): void | undefined;
    blur(): void | undefined;
    render(): JSX.Element;
}
declare const _default: React.ComponentType<import("@draftbit/react-theme-provider").$Without<Props, "theme"> & {
    theme?: import("@draftbit/react-theme-provider").$DeepPartial<any> | undefined;
}> & import("@draftbit/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<Props> & typeof TextField, {}>;
export default _default;
export declare const SEED_DATA: ({
    name: string;
    tag: string;
    description: string;
    category: string;
    preview_image_url: string;
    supports_list_render: boolean;
    props: {
        type: {
            label: string;
            description: string;
            formType: string;
            propType: string;
            defaultValue: string;
            options: string[];
            editable: boolean;
            required: boolean;
            group: string;
        };
        secureTextEntry: {
            group: string;
            label: string;
            description: string;
            formType: string;
            propType: string;
            defaultValue: null;
            editable: boolean;
            required: boolean;
        };
        label: {
            group: string;
            label: string;
            description: string;
            formType: string;
            propType: string;
            defaultValue: null;
            editable: boolean;
            required: boolean;
        };
        assistiveText: {
            group: string;
            label: string;
            description: string;
            formType: string;
            propType: string;
            defaultValue: null;
            editable: boolean;
            required: boolean;
        };
        error: {
            group: string;
            label: string;
            description: string;
            formType: string;
            propType: string;
            defaultValue: null;
            editable: boolean;
            required: boolean;
        };
        leftIconName: {
            group: string;
            label: string;
            description: string;
            formType: string;
            propType: string;
            defaultValue: null;
            editable: boolean;
            required: boolean;
        };
        leftIconMode: {
            group: string;
            label: string;
            description: string;
            formType: string;
            propType: string;
            defaultValue: null;
            options: string[];
            editable: boolean;
            required: boolean;
        };
        rightIconName: {
            group: string;
            label: string;
            description: string;
            formType: string;
            propType: string;
            defaultValue: null;
            editable: boolean;
            required: boolean;
        };
        fieldName: {
            handlerPropName: string;
            defaultValue: string;
            group: string;
            label: string;
            description: string;
            formType: string;
            propType: string;
            valuePropName: string;
            editable: boolean;
            required: boolean;
        };
        allowFontScaling: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            defaultValue: null;
            formType: string;
            propType: string;
        };
        autoCapitalize: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            defaultValue: null;
            options: string[];
            formType: string;
            propType: string;
        };
        autoCorrect: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            defaultValue: null;
            formType: string;
            propType: string;
        };
        autoFocus: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            defaultValue: null;
            formType: string;
            propType: string;
        };
        caretHidden: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            defaultValue: null;
            formType: string;
            propType: string;
        };
        contextMenuHidden: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            defaultValue: null;
            formType: string;
            propType: string;
        };
        defaultValue: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            defaultValue: null;
            formType: string;
            propType: string;
        };
        disabled: {
            group: string;
            label: string;
            description: string;
            formType: string;
            propType: string;
            defaultValue: null;
            editable: boolean;
            required: boolean;
        };
        editable: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            defaultValue: null;
            formType: string;
            propType: string;
        };
        keyboardAppearance: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            defaultValue: null;
            options: string[];
            formType: string;
            propType: string;
        };
        keyboardType: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            defaultValue: null;
            options: string[];
            formType: string;
            propType: string;
        };
        maxLength: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            defaultValue: null;
            min: number;
            step: number;
            precision: number;
            formType: string;
            propType: string;
        };
        placeholder: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            defaultValue: string;
            formType: string;
            propType: string;
        };
        placeholderTextColor: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            defaultValue: null;
            formType: string;
            propType: string;
        };
        returnKeyLabel: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            defaultValue: null;
            formType: string;
            propType: string;
        };
        returnKeyType: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            defaultValue: null;
            options: string[];
            formType: string;
            propType: string;
        };
        selectionColor: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            defaultValue: null;
            formType: string;
            propType: string;
        };
        selectTextOnFocus: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            defaultValue: null;
            formType: string;
            propType: string;
        };
    };
    layout: {};
} | {
    name: string;
    tag: string;
    description: string;
    category: string;
    preview_image_url: string;
    supports_list_render: boolean;
    props: {
        type: {
            label: string;
            description: string;
            formType: string;
            propType: string;
            defaultValue: string;
            options: string[];
            editable: boolean;
            required: boolean;
            group: string;
        };
        multiline: {
            label: string;
            description: string;
            group: string;
            formType: string;
            propType: string;
            defaultValue: boolean;
            editable: boolean;
            required: boolean;
        };
        label: {
            group: string;
            label: string;
            description: string;
            formType: string;
            propType: string;
            defaultValue: null;
            editable: boolean;
            required: boolean;
        };
        assistiveText: {
            group: string;
            label: string;
            description: string;
            formType: string;
            propType: string;
            defaultValue: null;
            editable: boolean;
            required: boolean;
        };
        error: {
            group: string;
            label: string;
            description: string;
            formType: string;
            propType: string;
            defaultValue: null;
            editable: boolean;
            required: boolean;
        };
        leftIconName: {
            group: string;
            label: string;
            description: string;
            formType: string;
            propType: string;
            defaultValue: null;
            editable: boolean;
            required: boolean;
        };
        leftIconMode: {
            group: string;
            label: string;
            description: string;
            formType: string;
            propType: string;
            defaultValue: null;
            options: string[];
            editable: boolean;
            required: boolean;
        };
        rightIconName: {
            group: string;
            label: string;
            description: string;
            formType: string;
            propType: string;
            defaultValue: null;
            editable: boolean;
            required: boolean;
        };
        fieldName: {
            handlerPropName: string;
            defaultValue: string;
            group: string;
            label: string;
            description: string;
            formType: string;
            propType: string;
            valuePropName: string;
            editable: boolean;
            required: boolean;
        };
        allowFontScaling: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            defaultValue: null;
            formType: string;
            propType: string;
        };
        autoCapitalize: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            defaultValue: null;
            options: string[];
            formType: string;
            propType: string;
        };
        autoCorrect: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            defaultValue: null;
            formType: string;
            propType: string;
        };
        autoFocus: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            defaultValue: null;
            formType: string;
            propType: string;
        };
        caretHidden: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            defaultValue: null;
            formType: string;
            propType: string;
        };
        contextMenuHidden: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            defaultValue: null;
            formType: string;
            propType: string;
        };
        defaultValue: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            defaultValue: null;
            formType: string;
            propType: string;
        };
        disabled: {
            group: string;
            label: string;
            description: string;
            formType: string;
            propType: string;
            defaultValue: null;
            editable: boolean;
            required: boolean;
        };
        editable: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            defaultValue: null;
            formType: string;
            propType: string;
        };
        keyboardAppearance: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            defaultValue: null;
            options: string[];
            formType: string;
            propType: string;
        };
        keyboardType: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            defaultValue: null;
            options: string[];
            formType: string;
            propType: string;
        };
        maxLength: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            defaultValue: null;
            min: number;
            step: number;
            precision: number;
            formType: string;
            propType: string;
        };
        placeholder: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            defaultValue: string;
            formType: string;
            propType: string;
        };
        placeholderTextColor: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            defaultValue: null;
            formType: string;
            propType: string;
        };
        returnKeyLabel: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            defaultValue: null;
            formType: string;
            propType: string;
        };
        returnKeyType: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            defaultValue: null;
            options: string[];
            formType: string;
            propType: string;
        };
        secureTextEntry: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            defaultValue: null;
            formType: string;
            propType: string;
        };
        selectionColor: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            defaultValue: null;
            formType: string;
            propType: string;
        };
        selectTextOnFocus: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            defaultValue: null;
            formType: string;
            propType: string;
        };
    };
    layout: {};
})[];
