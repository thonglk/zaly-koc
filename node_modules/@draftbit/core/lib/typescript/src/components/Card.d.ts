import React from "react";
import { ImageSourcePropType, StyleProp, ViewStyle, TextStyle } from "react-native";
import type { Theme } from "../styles/DefaultTheme";
import type { IconSlot } from "../interfaces/Icon";
export declare const TopRightCircleIcon: React.ComponentType<import("@draftbit/react-theme-provider").$Without<{
    icon: string;
    theme: Theme;
    onPress?: (() => void) | undefined;
} & IconSlot, "theme"> & {
    theme?: import("@draftbit/react-theme-provider").$DeepPartial<any> | undefined;
}> & import("@draftbit/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<{
    icon: string;
    theme: Theme;
    onPress?: (() => void) | undefined;
} & IconSlot> & (({ Icon, icon, theme, onPress, }: {
    icon: string;
    theme: Theme;
    onPress?: (() => void) | undefined;
} & IconSlot) => JSX.Element), {}>;
declare type Props = {
    image?: string | ImageSourcePropType;
    title?: string;
    subtitle?: string;
    description?: string;
    textCentered: boolean;
    icon?: string;
    aspectRatio?: number;
    elevation?: number;
    numColumns?: number;
    theme: Theme;
    titleStyle?: StyleProp<TextStyle>;
    subtitleStyle?: StyleProp<TextStyle>;
    descriptionStyle?: StyleProp<TextStyle>;
    style?: StyleProp<ViewStyle>;
    onPress?: () => void;
    onPressIcon?: () => void;
    children?: React.ReactNode;
} & IconSlot;
declare const _default: React.ComponentType<import("@draftbit/react-theme-provider").$Without<Props, "theme"> & {
    theme?: import("@draftbit/react-theme-provider").$DeepPartial<any> | undefined;
}> & import("@draftbit/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<Props> & React.FC<Props>, {}>;
export default _default;
export declare const SEED_DATA: {
    name: string;
    tag: string;
    description: string;
    category: string;
    props: {
        elevation: {
            defaultValue: any;
            label: string;
            description: string;
            formType: string;
            propType: string;
            options: number[];
            editable: boolean;
            required: boolean;
            group: string;
        };
        image: {
            label: string;
            description: string;
            group: string;
            formType: string;
            propType: string;
            defaultValue: string;
            editable: boolean;
            required: boolean;
        };
        onPress: {
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            formType: string;
            propType: string;
            defaultValue: null;
            group: string;
        };
        onPressIcon: {
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            formType: string;
            propType: string;
            defaultValue: null;
            group: string;
        };
        title: any;
        titleStyle: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            formType: string;
            propType: string;
            defaultValue: null;
        };
        subtitle: any;
        subtitleStyle: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            formType: string;
            propType: string;
            defaultValue: null;
        };
        description: any;
        descriptionStyle: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            formType: string;
            propType: string;
            defaultValue: null;
        };
        icon: {
            label: string;
            description: string;
            formType: string;
            propType: string;
            defaultValue: string;
            required: boolean;
            editable: boolean;
            group: string;
        };
        aspectRatio: {
            label: string;
            description: string;
            formType: string;
            propType: string;
            defaultValue: number;
            editable: boolean;
            required: boolean;
            group: string;
        };
        textCentered: {
            label: string;
            description: string;
            formType: string;
            propType: string;
            defaultValue: boolean;
            editable: boolean;
            required: boolean;
            group: string;
        };
    };
};
