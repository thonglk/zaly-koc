import * as React from "react";
import { TextProps } from "react-native";
import themeT from "../styles/DefaultTheme";
declare type Props = {
    theme: typeof themeT;
} & TextProps;
declare class Text extends React.Component<Props> {
    _root: any;
    setNativeProps(args: TextProps): any;
    render(): JSX.Element;
}
declare const _default: React.ComponentType<import("@draftbit/react-theme-provider").$Without<Props, "theme"> & {
    theme?: import("@draftbit/react-theme-provider").$DeepPartial<any> | undefined;
}> & import("@draftbit/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<Props> & typeof Text, {}>;
export default _default;
export declare const SEED_DATA: {
    name: string;
    tag: string;
    description: string;
    category: string;
    layout: {
        color: string;
    };
    props: {
        children: {
            group: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            formType: string;
            propType: string;
            defaultValue: string;
        };
        accessibilityLabel: {
            group: string;
            name: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            formType: string;
            propType: string;
            defaultValue: null;
        };
        accessibilityRole: {
            group: string;
            name: string;
            label: string;
            description: string;
            options: string[];
            editable: boolean;
            required: boolean;
            formType: string;
            propType: string;
            defaultValue: null;
        };
        accessible: {
            group: string;
            name: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            formType: string;
            propType: string;
            defaultValue: null;
        };
        adjustsFontSizeToFit: {
            group: string;
            name: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            formType: string;
            propType: string;
            defaultValue: null;
        };
        allowFontScaling: {
            group: string;
            name: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            formType: string;
            propType: string;
            defaultValue: null;
        };
        dataDetectorType: {
            group: string;
            name: string;
            label: string;
            description: string;
            options: string[];
            editable: boolean;
            required: boolean;
            formType: string;
            propType: string;
            defaultValue: null;
        };
        disabled: {
            group: string;
            name: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            formType: string;
            propType: string;
            defaultValue: null;
        };
        ellipsizeMode: {
            group: string;
            name: string;
            label: string;
            description: string;
            options: string[];
            editable: boolean;
            required: boolean;
            formType: string;
            propType: string;
            defaultValue: null;
        };
        maxFontSizeMultiplier: {
            group: string;
            name: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            formType: string;
            propType: string;
            defaultValue: null;
        };
        minimumFontScale: {
            group: string;
            name: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            formType: string;
            propType: string;
            min: number;
            step: number;
            precision: number;
            max: number;
            defaultValue: null;
        };
        numberOfLines: {
            group: string;
            name: string;
            label: string;
            defaultValue: null;
            description: string;
            editable: boolean;
            required: boolean;
            formType: string;
            propType: string;
            step: number;
            precision: number;
        };
        selectable: {
            group: string;
            name: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            formType: string;
            propType: string;
            defaultValue: null;
        };
        selectionColor: {
            group: string;
            name: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            formType: string;
            propType: string;
            defaultValue: null;
        };
        suppressHighlighting: {
            group: string;
            name: string;
            label: string;
            description: string;
            editable: boolean;
            required: boolean;
            formType: string;
            propType: string;
            defaultValue: null;
        };
        textBreakStrategy: {
            group: string;
            name: string;
            label: string;
            description: string;
            options: string[];
            editable: boolean;
            required: boolean;
            formType: string;
            propType: string;
            defaultValue: null;
        };
    };
};
