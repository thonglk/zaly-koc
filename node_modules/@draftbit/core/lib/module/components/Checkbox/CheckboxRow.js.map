{"version":3,"sources":["CheckboxRow.tsx"],"names":["React","StyleSheet","View","Platform","Checkbox","CheckboxStatus","Text","useCheckboxGroupContext","createTextProp","createTextStyle","createRowDirectionProp","createFieldNameProp","COMPONENT_TYPES","Direction","GroupDirection","Touchable","extractStyles","getCheckboxAlignment","parentDirection","direction","Horizontal","Row","RowReverse","renderLabel","value","labelStyle","textStyle","CheckboxRow","Icon","label","onPress","labelContainerStyle","checkboxStyle","status","disabled","style","rest","values","selectedValues","onValueChange","Array","isArray","isChecked","Checked","includes","handlePress","textStyles","viewStyles","styles","mainParent","flexDirection","alignItems","flex","Unchecked","create","justifyContent","paddingStart","minHeight","paddingEnd","select","web","cursor","userSelect","SEED_DATA","name","tag","category","deprecated","layout","props","description","required","defaultValue","editable","fieldName","valuePropName","handlerPropName"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {\n  StyleProp,\n  ViewStyle,\n  StyleSheet,\n  TextStyle,\n  View,\n  Platform,\n} from \"react-native\";\nimport Checkbox, { CheckboxProps, CheckboxStatus } from \"./Checkbox\";\nimport Text from \"../Text\";\nimport { useCheckboxGroupContext } from \"./context\";\nimport {\n  createTextProp,\n  createTextStyle,\n  createRowDirectionProp,\n  createFieldNameProp,\n  COMPONENT_TYPES,\n} from \"@draftbit/types\";\nimport type { IconSlot } from \"../../interfaces/Icon\";\nimport { Direction as GroupDirection } from \"./context\";\nimport Touchable from \"../Touchable\";\nimport { extractStyles } from \"../../utilities\";\n\nexport enum Direction {\n  Row = \"row\",\n  RowReverse = \"row-reverse\",\n}\n\nexport interface CheckboxRowProps extends Omit<CheckboxProps, \"onPress\"> {\n  label: string | React.ReactNode;\n  value: string;\n  labelContainerStyle: StyleProp<ViewStyle>;\n  checkboxStyle?: StyleProp<ViewStyle>;\n  labelStyle?: StyleProp<TextStyle>;\n  onPress?: (value: string) => void;\n  direction?: Direction;\n}\n\nconst getCheckboxAlignment = (\n  parentDirection: GroupDirection | undefined,\n  direction: Direction\n) => {\n  if (parentDirection === GroupDirection.Horizontal) {\n    return direction === Direction.Row ? \"flex-start\" : \"flex-end\";\n  } else if (direction === Direction.RowReverse) {\n    return \"flex-start\";\n  } else {\n    return \"flex-end\";\n  }\n};\n\nconst renderLabel = (\n  value: string | React.ReactNode,\n  labelStyle: StyleProp<TextStyle>,\n  textStyle: StyleProp<TextStyle>\n) => {\n  if (typeof value === \"string\") {\n    return <Text style={[labelStyle, textStyle]}>{value}</Text>;\n  } else {\n    return <>{value}</>;\n  }\n};\n\nconst CheckboxRow: React.FC<CheckboxRowProps & IconSlot> = ({\n  Icon,\n  label = \"Label\",\n  value,\n  onPress = () => {},\n  labelContainerStyle,\n  labelStyle,\n  checkboxStyle,\n  direction = Direction.Row,\n  status,\n  disabled,\n  style,\n  ...rest\n}) => {\n  const {\n    values: selectedValues,\n    onValueChange,\n    direction: parentDirection,\n  } = useCheckboxGroupContext();\n\n  const values = Array.isArray(selectedValues) ? selectedValues : [];\n  const isChecked = status === CheckboxStatus.Checked || values.includes(value);\n\n  const handlePress = () => {\n    if (!disabled) {\n      onPress(value);\n      onValueChange && onValueChange(value, !isChecked);\n    }\n  };\n\n  const { textStyles, viewStyles } = extractStyles(style);\n\n  return (\n    <Touchable\n      onPress={handlePress}\n      style={[styles.mainParent, { flexDirection: direction }, viewStyles]}\n      disabled={disabled}\n      {...rest}\n    >\n      <View\n        style={[\n          styles.label,\n          {\n            alignItems: direction === Direction.Row ? \"flex-start\" : \"flex-end\",\n          },\n          labelContainerStyle,\n        ]}\n      >\n        {renderLabel(label, labelStyle, textStyles)}\n      </View>\n      <View\n        style={{\n          flex: 1,\n          alignItems: getCheckboxAlignment(parentDirection, direction),\n        }}\n      >\n        <Checkbox\n          Icon={Icon}\n          status={\n            status || values.includes(value)\n              ? CheckboxStatus.Checked\n              : CheckboxStatus.Unchecked\n          }\n          onPress={handlePress}\n          style={checkboxStyle}\n          disabled={disabled}\n        />\n      </View>\n    </Touchable>\n  );\n};\n\nconst styles = StyleSheet.create({\n  mainParent: {\n    alignItems: \"center\",\n    justifyContent: \"space-around\",\n    paddingStart: 20,\n    minHeight: 50,\n    paddingEnd: 20,\n    flex: 1,\n    ...Platform.select({\n      web: {\n        cursor: \"pointer\",\n        userSelect: \"none\",\n      },\n    }),\n  },\n  label: {\n    flex: 3,\n  },\n});\n\nexport default CheckboxRow;\n\nexport const SEED_DATA = {\n  name: \"Checkbox Row\",\n  tag: \"CheckboxRow\",\n  category: COMPONENT_TYPES.deprecated,\n  layout: {\n    minHeight: 50,\n  },\n  props: {\n    label: createTextProp({\n      label: \"Label\",\n      description: \"Label to show with the checkbox\",\n      required: true,\n      defaultValue: \"First Option\",\n    }),\n    labelStyle: createTextStyle({\n      label: \"Label Style\",\n      description: \"Change the styles of the label\",\n      required: false,\n      editable: false,\n    }),\n    direction: createRowDirectionProp(),\n    fieldName: createFieldNameProp({\n      defaultValue: \"unchecked\",\n      valuePropName: \"status\",\n      handlerPropName: \"onPress\",\n    }),\n  },\n};\n"]}