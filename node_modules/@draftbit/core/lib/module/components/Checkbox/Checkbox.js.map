{"version":3,"sources":["Checkbox.tsx"],"names":["React","View","StyleSheet","COMPONENT_TYPES","createBoolProp","createIconProp","createStaticNumberProp","createColorProp","createFieldNameProp","GROUPS","useTheme","Touchable","usePrevious","CheckboxStatus","Checkbox","Icon","status","Unchecked","disabled","onPress","color","uncheckedColor","indeterminateColor","initialValue","checkedIcon","uncheckedIcon","indeterminateIcon","size","style","rest","previousInitialValue","useEffect","colors","colorsMap","Checked","primary","Indeterminate","light","iconsMap","checkboxColor","styles","container","width","height","icon","absoluteFill","fillContainer","fill","opacity","borderColor","create","borderRadius","alignItems","justifyContent","alignSelf","SEED_DATA","name","tag","category","input","props","fieldName","defaultValue","valuePropName","handlerPropName","group","basic","label","description"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {\n  View,\n  StyleSheet,\n  TouchableHighlightProps,\n  StyleProp,\n  ViewStyle,\n} from \"react-native\";\nimport {\n  COMPONENT_TYPES,\n  createBoolProp,\n  createIconProp,\n  createStaticNumberProp,\n  createColorProp,\n  createFieldNameProp,\n  GROUPS,\n} from \"@draftbit/types\";\nimport { useTheme } from \"../../theming\";\nimport type { IconSlot } from \"../../interfaces/Icon\";\n\nimport Touchable from \"../Touchable\";\nimport { usePrevious } from \"../../hooks\";\n\nexport enum CheckboxStatus {\n  Checked = \"checked\",\n  Unchecked = \"unchecked\",\n  Indeterminate = \"indeterminate\",\n}\n\nexport interface CheckboxProps {\n  status?: CheckboxStatus;\n  disabled?: boolean;\n  onPress?: (checked: boolean) => void;\n  color?: string;\n  uncheckedColor?: string;\n  indeterminateColor?: string;\n  checkedIcon?: string;\n  uncheckedIcon?: string;\n  indeterminateIcon?: string;\n  initialValue?: boolean;\n  size?: number;\n  style?: StyleProp<ViewStyle>;\n}\n\nconst Checkbox: React.FC<CheckboxProps & TouchableHighlightProps & IconSlot> =\n  ({\n    Icon,\n    status = CheckboxStatus.Unchecked,\n    disabled = false,\n    onPress = () => {},\n    color,\n    uncheckedColor,\n    indeterminateColor,\n    initialValue,\n    checkedIcon = \"MaterialCommunityIcons/checkbox-marked\",\n    uncheckedIcon = \"MaterialCommunityIcons/checkbox-blank-outline\",\n    indeterminateIcon = \"AntDesign/minussquareo\",\n    size = 24,\n    style,\n    ...rest\n  }) => {\n    const previousInitialValue = usePrevious(initialValue);\n    React.useEffect(() => {\n      if (initialValue !== previousInitialValue) {\n        onPress(initialValue);\n      }\n    }, [initialValue, previousInitialValue, onPress]);\n    const { colors } = useTheme();\n\n    const colorsMap = {\n      [CheckboxStatus.Checked]: color || colors.primary,\n      [CheckboxStatus.Unchecked]: uncheckedColor || colors.primary,\n      [CheckboxStatus.Indeterminate]: indeterminateColor || colors.light,\n    };\n\n    const iconsMap = {\n      [CheckboxStatus.Checked]: checkedIcon,\n      [CheckboxStatus.Unchecked]: uncheckedIcon,\n      [CheckboxStatus.Indeterminate]: indeterminateIcon,\n    };\n\n    const checkboxColor = colorsMap[status];\n\n    return (\n      <Touchable\n        {...rest}\n        onPress={() => onPress(status === \"unchecked\" ? true : false)}\n        disabled={disabled}\n        accessibilityState={{ disabled }}\n        accessibilityRole=\"button\"\n        accessibilityLiveRegion=\"polite\"\n        style={[styles.container, style, { width: size, height: size }]}\n      >\n        <Icon\n          style={styles.icon}\n          name={iconsMap[status]}\n          size={size}\n          color={checkboxColor}\n        />\n        <View style={[StyleSheet.absoluteFill, styles.fillContainer]}>\n          <View\n            style={[\n              styles.fill,\n              { opacity: disabled ? 0.5 : 1 },\n              { borderColor: checkboxColor },\n            ]}\n          />\n        </View>\n      </Touchable>\n    );\n  };\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n  },\n  fillContainer: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  icon: {\n    alignSelf: \"center\",\n  },\n  fill: {\n    borderRadius: 5,\n    width: 30,\n    height: 30,\n    alignSelf: \"center\",\n  },\n});\n\nexport default Checkbox;\n\nexport const SEED_DATA = {\n  name: \"Checkbox\",\n  tag: \"Checkbox\",\n  category: COMPONENT_TYPES.input,\n  props: {\n    fieldName: createFieldNameProp({\n      defaultValue: \"checkboxValue\",\n      valuePropName: \"status\",\n      handlerPropName: \"onPress\",\n    }),\n    color: createColorProp({\n      group: GROUPS.basic,\n      label: \"Color\",\n      description: \"Color for the button (used when the checkbox is checked)\",\n      defaultValue: null,\n    }),\n    uncheckedColor: createColorProp({\n      group: GROUPS.basic,\n      label: \"Unselected Color\",\n      description: \"Color for the button when the checkbox is unchecked\",\n      defaultValue: null,\n    }),\n    indeterminateColor: createColorProp({\n      group: GROUPS.basic,\n      label: \"Indeterminate Color\",\n      description: \"Color for the button when the checkbox is indeterminate\",\n      defaultValue: null,\n    }),\n    disabled: createBoolProp({\n      label: \"Disabled\",\n      description: \"Whether the checkbox is disabled\",\n    }),\n    size: createStaticNumberProp({\n      label: \"Size\",\n      description: \"Specifies the size of the icon\",\n      defaultValue: null,\n    }),\n    checkedIcon: createIconProp({\n      label: \"Checked Icon\",\n      description: 'Icon to show when the checkbox status is \"checked\"',\n      defaultValue: null,\n    }),\n    uncheckedIcon: createIconProp({\n      label: \"Unchecked Icon\",\n      description: 'Icon to show when the checkbox status is \"unchecked\"',\n      defaultValue: null,\n    }),\n    indeterminateIcon: createIconProp({\n      label: \"Indeterminate Icon\",\n      description: 'Icon to show when the checkbox status is \"indeterminate\"',\n      defaultValue: null,\n    }),\n  },\n};\n"]}