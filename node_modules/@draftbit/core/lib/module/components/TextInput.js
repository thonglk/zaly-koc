function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from "react";
import { TextInput as NativeTextInput } from "react-native";
import { usePrevious } from "../hooks";

const TextInput = ({
  initialValue,
  onChangeText,
  ...props
}) => {
  const previousInitialValue = usePrevious(initialValue);
  React.useEffect(() => {
    if (initialValue !== previousInitialValue) {
      onChangeText(initialValue);
    }
  }, [initialValue, previousInitialValue, onChangeText]);
  return /*#__PURE__*/React.createElement(NativeTextInput, _extends({
    onChangeText: onChangeText
  }, props));
};

export default TextInput;
//# sourceMappingURL=TextInput.js.map