{"version":3,"sources":["CircularProgress.tsx"],"names":["React","View","Svg","Path","G","CircularProgress","Component","centerX","centerY","radius","angleInDegrees","angleInRadians","Math","PI","x","cos","y","sin","startAngle","endAngle","start","polarToCartesian","end","largeArcFlag","d","join","fill","min","max","render","size","width","backgroundWidth","tintColor","tintTransparency","backgroundColor","style","rotation","lineCap","arcSweepAngle","children","childrenContainerStyle","padding","renderCap","dashedBackground","gap","dashedTint","props","maxWidthCircle","sizeWithPadding","currentFillAngle","clampFill","backgroundPath","circlePath","circlePathItem","coordinate","cap","center","offset","localChildrenContainerStyle","position","left","top","height","borderRadius","alignItems","justifyContent","overflow","strokeDasharrayTint","Object","values","map","value","toString","strokeDasharrayBackground"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { View, StyleProp, ViewStyle } from \"react-native\";\nimport { Svg, Path, G } from \"react-native-svg\";\n\nexport type Props = {\n  size: number;\n  width: number;\n  backgroundWidth?: number;\n  tintColor?: string;\n  tintTransparency?: boolean;\n  backgroundColor?: string;\n  style?: StyleProp<ViewStyle>;\n  rotation?: string | number | undefined;\n  lineCap?: \"butt\" | \"square\" | \"round\" | undefined;\n  arcSweepAngle?: number;\n  fill: number;\n  children?: (fill: number) => React.ReactNode;\n  childrenContainerStyle?: StyleProp<ViewStyle>;\n  padding?: number;\n  renderCap?: (obj: { center: { x: number; y: number } }) => React.ReactNode;\n  dashedBackground?: { width: number; gap: number };\n  dashedTint?: { width: number; gap: number };\n};\n\nclass CircularProgress extends React.Component<Props> {\n  polarToCartesian = (\n    centerX: number,\n    centerY: number,\n    radius: number,\n    angleInDegrees: number\n  ): { x: number; y: number } => {\n    var angleInRadians = ((angleInDegrees - 90) * Math.PI) / 180.0;\n    return {\n      x: centerX + radius * Math.cos(angleInRadians),\n      y: centerY + radius * Math.sin(angleInRadians),\n    };\n  };\n\n  circlePath = (\n    x: number,\n    y: number,\n    radius: number,\n    startAngle: number,\n    endAngle: number\n  ): string => {\n    var start = this.polarToCartesian(x, y, radius, endAngle * 0.9999);\n    var end = this.polarToCartesian(x, y, radius, startAngle);\n    var largeArcFlag = endAngle - startAngle <= 180 ? \"0\" : \"1\";\n    var d = [\n      \"M\",\n      start.x,\n      start.y,\n      \"A\",\n      radius,\n      radius,\n      0,\n      largeArcFlag,\n      0,\n      end.x,\n      end.y,\n    ];\n    return d.join(\" \");\n  };\n\n  clampFill = (fill: number) => Math.min(100, Math.max(0, fill));\n\n  render() {\n    const {\n      size,\n      width,\n      backgroundWidth,\n      tintColor = \"black\",\n      tintTransparency = true,\n      backgroundColor,\n      style,\n      rotation = 90,\n      lineCap = \"butt\",\n      arcSweepAngle = 360,\n      fill,\n      children,\n      childrenContainerStyle,\n      padding = 0,\n      renderCap,\n      dashedBackground = { width: 0, gap: 0 },\n      dashedTint = { width: 0, gap: 0 },\n    } = this.props;\n\n    const maxWidthCircle = backgroundWidth\n      ? Math.max(width, backgroundWidth)\n      : width;\n    const sizeWithPadding = size / 2 + padding / 2;\n    const radius = size / 2 - maxWidthCircle / 2 - padding / 2;\n\n    const currentFillAngle = (arcSweepAngle * this.clampFill(fill)) / 100;\n    const backgroundPath = this.circlePath(\n      sizeWithPadding,\n      sizeWithPadding,\n      radius,\n      tintTransparency ? 0 : currentFillAngle,\n      arcSweepAngle\n    );\n    const circlePathItem = this.circlePath(\n      sizeWithPadding,\n      sizeWithPadding,\n      radius,\n      0,\n      currentFillAngle\n    );\n    const coordinate = this.polarToCartesian(\n      sizeWithPadding,\n      sizeWithPadding,\n      radius,\n      currentFillAngle\n    );\n    const cap = renderCap ? renderCap({ center: coordinate }) : null;\n\n    const offset = size - maxWidthCircle * 2;\n\n    const localChildrenContainerStyle: StyleProp<ViewStyle>[] = [\n      {\n        position: \"absolute\",\n        left: maxWidthCircle + padding / 2,\n        top: maxWidthCircle + padding / 2,\n        width: offset,\n        height: offset,\n        borderRadius: offset / 2,\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        overflow: \"hidden\",\n      },\n      childrenContainerStyle,\n    ];\n\n    const strokeDasharrayTint =\n      dashedTint.gap > 0\n        ? Object.values(dashedTint)\n            .map((value) => value.toString())\n            .join(\" \")\n        : \"\";\n\n    const strokeDasharrayBackground =\n      dashedBackground.gap > 0\n        ? Object.values(dashedBackground)\n            .map((value) => value.toString())\n            .join(\" \")\n        : \"\";\n\n    return (\n      <View style={style}>\n        <Svg width={size + padding} height={size + padding}>\n          <G\n            rotation={rotation}\n            originX={(size + padding) / 2}\n            originY={(size + padding) / 2}\n          >\n            {backgroundColor && (\n              <Path\n                d={backgroundPath}\n                stroke={backgroundColor}\n                strokeWidth={backgroundWidth || width}\n                strokeLinecap={lineCap}\n                strokeDasharray={strokeDasharrayBackground}\n                fill=\"transparent\"\n              />\n            )}\n            {fill > 0 && (\n              <Path\n                d={circlePathItem}\n                stroke={tintColor}\n                strokeWidth={width}\n                strokeLinecap={lineCap}\n                strokeDasharray={strokeDasharrayTint}\n                fill=\"transparent\"\n              />\n            )}\n            {cap}\n          </G>\n        </Svg>\n        {children && (\n          <View style={localChildrenContainerStyle}>{children(fill)}</View>\n        )}\n      </View>\n    );\n  }\n}\n\nexport default CircularProgress;\n"]}