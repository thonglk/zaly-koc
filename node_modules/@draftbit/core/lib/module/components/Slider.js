function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import * as React from "react";
import { View, StyleSheet } from "react-native";
import NativeSlider from "@react-native-community/slider";
import isNumber from "lodash.isnumber";
import toNumber from "lodash.tonumber";
import { COMPONENT_TYPES, GROUPS, createNumberProp, createColorProp, createFieldNameProp, createIconProp } from "@draftbit/types";
import { withTheme } from "../theming";
import { usePrevious } from "../hooks";

function maybeParseValue(value) {
  if (value === undefined) {
    return undefined;
  }

  if (isNumber(value)) {
    return value;
  }

  try {
    const maybe = toNumber(value);

    if (isNumber(maybe)) {
      return maybe;
    }
  } catch {
    return undefined;
  }

  return undefined;
}

function Slider({
  Icon,
  leftIcon,
  rightIcon,
  leftIconColor,
  rightIconColor,
  value,
  initialValue,
  minimumTrackTintColor,
  maximumTrackTintColor,
  thumbTintColor,
  minimumValue = 0,
  maximumValue = 100,
  tapToSeek,
  step = 1,
  onValueChange = () => {},
  style,
  theme,
  ...rest
}) {
  const previousInitialValue = usePrevious(initialValue);
  React.useEffect(() => {
    if (initialValue !== previousInitialValue) {
      onValueChange(initialValue);
    }
  }, [initialValue, previousInitialValue, onValueChange]);
  const minTrackColor = minimumTrackTintColor || theme.colors.primary;
  const maxTrackColor = maximumTrackTintColor || theme.colors.light;
  const thumbColor = thumbTintColor || theme.colors.primary;
  const leftIconThemeColor = leftIconColor || theme.colors.light;
  const rightIconThemeColor = rightIconColor || theme.colors.light;
  const parsedValue = maybeParseValue(value);
  return /*#__PURE__*/React.createElement(View, _extends({
    style: [styles.container, style]
  }, rest), leftIcon ? /*#__PURE__*/React.createElement(Icon, {
    color: leftIconThemeColor,
    name: leftIcon,
    size: 24
  }) : null, /*#__PURE__*/React.createElement(NativeSlider, {
    value: parsedValue,
    step: step,
    minimumValue: minimumValue,
    maximumValue: maximumValue,
    tapToSeek: tapToSeek,
    minimumTrackTintColor: minTrackColor,
    maximumTrackTintColor: maxTrackColor,
    thumbTintColor: thumbColor,
    onSlidingComplete: onValueChange,
    style: styles.slider
  }), rightIcon ? /*#__PURE__*/React.createElement(Icon, {
    color: rightIconThemeColor,
    name: rightIcon,
    size: 24
  }) : null);
}

const styles = StyleSheet.create({
  container: {
    height: 40,
    flexDirection: "row",
    alignItems: "center",
    marginLeft: 12,
    marginRight: 12
  },
  slider: {
    flex: 1,
    marginHorizontal: 12
  }
});
export default withTheme(Slider);
export const SEED_DATA = {
  name: "Slider",
  tag: "Slider",
  description: "A component used to set a value in a range",
  category: COMPONENT_TYPES.input,
  layout: {},
  props: {
    fieldName: createFieldNameProp({
      defaultValue: "sliderValue",
      handlerPropName: "onValueChange",
      valuePropName: "value"
    }),
    minimumValue: createNumberProp({
      group: GROUPS.basic,
      label: "Min Value",
      min: 0,
      max: 1000
    }),
    maximumValue: createNumberProp({
      group: GROUPS.basic,
      label: "Max Value",
      min: 1,
      max: 10000
    }),
    step: createNumberProp({
      group: GROUPS.basic,
      label: "Step",
      min: 0,
      max: 100,
      step: 0.01,
      precision: 2
    }),
    leftIcon: createIconProp({
      label: "Left Icon",
      defaultValue: null
    }),
    rightIcon: createIconProp({
      label: "Right Icon",
      defaultValue: null
    }),
    minimumTrackTintColor: createColorProp({
      label: "Min Track Color",
      defaultValue: null
    }),
    maximumTrackTintColor: createColorProp({
      label: "Max Track Color",
      defaultValue: null
    }),
    thumbTintColor: createColorProp({
      label: "Thumb Color",
      defaultValue: null
    })
  }
};
//# sourceMappingURL=Slider.js.map