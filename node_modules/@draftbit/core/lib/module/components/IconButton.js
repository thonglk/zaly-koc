function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import * as React from "react";
import { View, StyleSheet, ActivityIndicator, Pressable, Platform } from "react-native";
import { withTheme } from "../theming";
import { COMPONENT_TYPES, GROUPS, createIconProp, createActionProp, createColorProp, createNumberProp } from "@draftbit/types";

const IconButton = ({
  Icon,
  icon,
  color: customColor,
  size = 32,
  disabled = false,
  loading = false,
  onPress,
  theme,
  style,
  ...props
}) => {
  const iconColor = customColor || theme.colors.primary;
  return /*#__PURE__*/React.createElement(Pressable, _extends({
    onPress: onPress,
    disabled: disabled || loading,
    style: ({
      pressed
    }) => {
      return [styles.container, {
        opacity: pressed || disabled ? 0.75 : 1,
        width: size,
        height: size,
        alignItems: "center",
        justifyContent: "center"
      }, style];
    }
  }, props), /*#__PURE__*/React.createElement(View, null, icon && !loading ? /*#__PURE__*/React.createElement(Icon, {
    name: icon,
    size: size - 2,
    color: iconColor
  }) : null, loading ? /*#__PURE__*/React.createElement(ActivityIndicator, {
    size: "small",
    color: iconColor
  }) : null));
};

const styles = StyleSheet.create({
  container: {
    alignItems: "center",
    justifyContent: "center",
    ...Platform.select({
      web: {
        cursor: "pointer",
        userSelect: "none"
      }
    })
  }
});
export default withTheme(IconButton);
export const SEED_DATA = {
  name: "Icon Button",
  tag: "IconButton",
  category: COMPONENT_TYPES.button,
  layout: {},
  props: {
    icon: createIconProp(),
    color: createColorProp(),
    onPress: createActionProp(),
    size: createNumberProp({
      group: GROUPS.basic,
      label: "Size",
      description: "Width and height of your icon",
      defaultValue: 32,
      min: 16,
      max: 128,
      step: 1,
      precision: 0
    })
  }
};
//# sourceMappingURL=IconButton.js.map