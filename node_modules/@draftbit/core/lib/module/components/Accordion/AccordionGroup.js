import * as React from "react";
import { View, StyleSheet, Pressable } from "react-native";
import Text from "../Text";
import { withTheme } from "../../theming";
import { COMPONENT_TYPES, createNumberProp, createIconProp, createTextProp, createStaticBoolProp, createColorProp } from "@draftbit/types";

const AccordionGroup = ({
  Icon,
  openColor,
  closedColor,
  caretColor,
  icon,
  iconSize = 24,
  style,
  label,
  children,
  expanded: expandedProp,
  theme,
  ...rest
}) => {
  const [expanded, setExpanded] = React.useState(expandedProp || false);

  const handlePressAction = () => {
    if (expandedProp === undefined) {
      setExpanded(!expanded);
    }
  };

  const expandedInternal = expandedProp !== undefined ? expandedProp : expanded;
  const expandedColor = openColor || theme.colors.primary;
  const collapsedColor = closedColor || theme.colors.divider;
  const labelColor = expanded ? expandedColor : collapsedColor;
  return /*#__PURE__*/React.createElement(View, rest, /*#__PURE__*/React.createElement(Pressable, {
    style: [styles.container, style],
    onPress: handlePressAction,
    accessibilityRole: "button"
  }, /*#__PURE__*/React.createElement(View, {
    style: [styles.row, {
      backgroundColor: caretColor
    }]
  }, icon ? /*#__PURE__*/React.createElement(Icon, {
    name: icon,
    size: iconSize,
    color: labelColor
  }) : null, /*#__PURE__*/React.createElement(View, {
    style: [styles.item, styles.content]
  }, /*#__PURE__*/React.createElement(Text, {
    selectable: false,
    style: [styles.label, {
      color: labelColor
    }, style]
  }, label)), /*#__PURE__*/React.createElement(View, {
    style: [styles.item]
  }, /*#__PURE__*/React.createElement(Icon, {
    name: expanded ? "MaterialIcons/keyboard-arrow-up" : "MaterialIcons/keyboard-arrow-down",
    color: labelColor,
    size: 24
  })))), expandedInternal ? React.Children.map(children, child => {
    if ( /*#__PURE__*/React.isValidElement(child) && !child.props.left && !child.props.right) {
      return /*#__PURE__*/React.cloneElement(child, {
        style: [styles.child, child.props.style]
      });
    }

    return child;
  }) : null);
};

const styles = StyleSheet.create({
  container: {
    padding: 8
  },
  row: {
    flexDirection: "row",
    alignItems: "center"
  },
  label: {
    fontSize: 16
  },
  item: {
    margin: 8
  },
  child: {
    paddingLeft: 64
  },
  content: {
    flex: 1,
    justifyContent: "center"
  }
});
export default withTheme(AccordionGroup);
export const SEED_DATA = {
  name: "Accordion Group",
  tag: "AccordionGroup",
  description: "An expandable container containing components",
  category: COMPONENT_TYPES.container,
  props: {
    openColor: createColorProp({
      label: "Color when expanded"
    }),
    closedColor: createColorProp({
      label: "Color when collapsed"
    }),
    caretColor: createColorProp({
      label: "Color of caret"
    }),
    iconSize: createNumberProp({
      defaultValue: 24
    }),
    label: createTextProp({
      label: "Accordion label"
    }),
    expanded: createStaticBoolProp({
      label: "Whether the AccordionGroup should be expanded or not"
    }),
    icon: createIconProp()
  }
};
//# sourceMappingURL=AccordionGroup.js.map