function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import * as React from "react";
import { Pressable, StyleSheet, View } from "react-native";
import Text from "../Text";
import { COMPONENT_TYPES, createIconProp, createTextProp, createColorProp } from "@draftbit/types";
import { extractStyles } from "../../utilities";
import { withTheme } from "../../theming";

const AccordionItem = ({
  Icon,
  icon,
  label,
  style,
  iconColor,
  theme,
  ...rest
}) => {
  const {
    textStyles,
    viewStyles
  } = extractStyles(style);
  return /*#__PURE__*/React.createElement(Pressable, _extends({
    style: [styles.container, viewStyles]
  }, rest), /*#__PURE__*/React.createElement(View, {
    style: styles.row
  }, icon ? /*#__PURE__*/React.createElement(Icon, {
    name: icon,
    size: 24,
    color: iconColor || theme.colors.primary
  }) : null, /*#__PURE__*/React.createElement(View, {
    style: [styles.item, styles.content]
  }, /*#__PURE__*/React.createElement(Text, {
    selectable: false,
    style: textStyles
  }, label))));
};

const styles = StyleSheet.create({
  container: {
    padding: 8
  },
  row: {
    flexDirection: "row",
    alignItems: "center"
  },
  item: {
    marginVertical: 6,
    paddingLeft: 8
  },
  content: {
    flex: 1,
    justifyContent: "center"
  }
});
export default withTheme(AccordionItem);
export const SEED_DATA = {
  name: "Accordion Item",
  tag: "AccordionItem",
  description: "Item to be used in Accordion",
  category: COMPONENT_TYPES.row,
  props: {
    icon: createIconProp(),
    label: createTextProp({
      label: "Item label"
    }),
    iconColor: createColorProp({
      label: "Color for Icon"
    })
  }
};
//# sourceMappingURL=AccordionItem.js.map