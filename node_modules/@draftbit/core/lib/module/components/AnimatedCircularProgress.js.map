{"version":3,"sources":["AnimatedCircularProgress.tsx"],"names":["React","Animated","Easing","CircularProgress","AnimatedProgress","createAnimatedComponent","AnimatedCircularProgress","duration","easing","out","ease","fill","prefill","useNativeDriver","tintColorSecondary","onAnimationComplete","tintColor","other","fillAnimation","useState","Value","animate","useCallback","toVal","dur","toValue","dura","eas","useNative","anim","timing","start","animateColor","tintAnimation","interpolate","inputRange","outputRange","useEffect","style","childrenContainerStyle"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,QADF,EAEEC,MAFF,QAMO,cANP;AAOA,OAAOC,gBAAP,MAEO,oBAFP;AAGA,MAAMC,gBAAgB,GAAGH,QAAQ,CAACI,uBAAT,CAAiCF,gBAAjC,CAAzB;;AAWA,MAAMG,wBAAyC,GAAG,CAAC;AACjDC,EAAAA,QAAQ,GAAG,GADsC;AAEjDC,EAAAA,MAAM,GAAGN,MAAM,CAACO,GAAP,CAAWP,MAAM,CAACQ,IAAlB,CAFwC;AAGjDC,EAAAA,IAHiD;AAIjDC,EAAAA,OAAO,GAAG,CAJuC;AAKjDC,EAAAA,eAAe,GAAG,KAL+B;AAMjDC,EAAAA,kBANiD;AAOjDC,EAAAA,mBAPiD;AAQjDC,EAAAA,SAAS,GAAG,OARqC;AASjD,KAAGC;AAT8C,CAAD,KAU5C;AACJ,QAAM,CAACC,aAAD,IAAkBlB,KAAK,CAACmB,QAAN,CACtB,IAAIlB,QAAQ,CAACmB,KAAb,CAAmBR,OAAnB,CADsB,CAAxB;AAIA,QAAMS,OAAO,GAAGrB,KAAK,CAACsB,WAAN,CACd,CACEC,KAAa,GAAG,CAAC,CADnB,EAEEC,GAFF,EAGEd,IAHF,KAIkC;AAChC,UAAMe,OAAO,GAAGF,KAAK,IAAI,CAAT,GAAaA,KAAb,GAAqBZ,IAArC;AACA,UAAMe,IAAI,GAAGF,GAAG,IAAIjB,QAApB;AACA,UAAMoB,GAAG,GAAGjB,IAAI,IAAIF,MAApB;AACA,UAAMoB,SAAS,GAAGf,eAAlB;AAEA,UAAMgB,IAAI,GAAG5B,QAAQ,CAAC6B,MAAT,CAAgBZ,aAAhB,EAA+B;AAC1CL,MAAAA,eAAe,EAAEe,SADyB;AAE1CH,MAAAA,OAF0C;AAG1CjB,MAAAA,MAAM,EAAEmB,GAHkC;AAI1CpB,MAAAA,QAAQ,EAAEmB;AAJgC,KAA/B,CAAb;AAMAG,IAAAA,IAAI,CAACE,KAAL,CAAWhB,mBAAX;AAEA,WAAOc,IAAP;AACD,GApBa,EAqBd,CACEtB,QADF,EAEEC,MAFF,EAGEG,IAHF,EAIEE,eAJF,EAKEK,aALF,EAMEH,mBANF,CArBc,CAAhB;;AA+BA,QAAMiB,YAAY,GAAG,MAAM;AACzB,QAAI,CAAClB,kBAAL,EAAyB;AACvB,aAAOE,SAAP;AACD;;AAED,UAAMiB,aAAa,GAAGf,aAAa,CAACgB,WAAd,CAA0B;AAC9CC,MAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,GAAJ,CADkC;AAE9CC,MAAAA,WAAW,EAAE,CAACpB,SAAD,EAAYF,kBAAZ;AAFiC,KAA1B,CAAtB;AAKA,WAAOmB,aAAP;AACD,GAXD;;AAaAjC,EAAAA,KAAK,CAACqC,SAAN,CAAgB,MAAM;AACpBhB,IAAAA,OAAO;AACR,GAFD,EAEG,CAACV,IAAD,EAAOU,OAAP,CAFH;AAIA,sBACE,oBAAC,gBAAD,eACMJ,KADN;AAEE,IAAA,KAAK,EAAEA,KAAK,CAACqB,KAFf;AAGE,IAAA,sBAAsB,EACpBrB,KAAK,CAACsB,sBAJV;AAQE,IAAA,IAAI,EAAErB,aARR;AASE,IAAA,SAAS,EAAEc,YAAY;AATzB,KADF;AAaD,CA5ED;;AA8EA,eAAe1B,wBAAf","sourcesContent":["import * as React from \"react\";\nimport {\n  Animated,\n  Easing,\n  EasingFunction,\n  StyleProp,\n  ViewStyle,\n} from \"react-native\";\nimport CircularProgress, {\n  Props as CircularProgressProps,\n} from \"./CircularProgress\";\nconst AnimatedProgress = Animated.createAnimatedComponent(CircularProgress);\n\ntype Props = {\n  duration?: number;\n  easing?: EasingFunction;\n  prefill?: number;\n  useNativeDriver?: boolean;\n  tintColorSecondary?: string;\n  onAnimationComplete?: Animated.EndCallback | undefined;\n} & CircularProgressProps;\n\nconst AnimatedCircularProgress: React.FC<Props> = ({\n  duration = 500,\n  easing = Easing.out(Easing.ease),\n  fill,\n  prefill = 0,\n  useNativeDriver = false,\n  tintColorSecondary,\n  onAnimationComplete,\n  tintColor = \"black\",\n  ...other\n}) => {\n  const [fillAnimation] = React.useState<Animated.Value>(\n    new Animated.Value(prefill)\n  );\n\n  const animate = React.useCallback(\n    (\n      toVal: number = -1,\n      dur?: number,\n      ease?: EasingFunction\n    ): Animated.CompositeAnimation => {\n      const toValue = toVal >= 0 ? toVal : fill;\n      const dura = dur || duration;\n      const eas = ease || easing;\n      const useNative = useNativeDriver;\n\n      const anim = Animated.timing(fillAnimation, {\n        useNativeDriver: useNative,\n        toValue,\n        easing: eas,\n        duration: dura,\n      });\n      anim.start(onAnimationComplete);\n\n      return anim;\n    },\n    [\n      duration,\n      easing,\n      fill,\n      useNativeDriver,\n      fillAnimation,\n      onAnimationComplete,\n    ]\n  );\n\n  const animateColor = () => {\n    if (!tintColorSecondary) {\n      return tintColor;\n    }\n\n    const tintAnimation = fillAnimation.interpolate({\n      inputRange: [0, 100],\n      outputRange: [tintColor, tintColorSecondary],\n    });\n\n    return tintAnimation;\n  };\n\n  React.useEffect(() => {\n    animate();\n  }, [fill, animate]);\n\n  return (\n    <AnimatedProgress\n      {...other}\n      style={other.style as Animated.WithAnimatedValue<StyleProp<ViewStyle>>}\n      childrenContainerStyle={\n        other.childrenContainerStyle as Animated.WithAnimatedValue<\n          StyleProp<ViewStyle>\n        >\n      }\n      fill={fillAnimation}\n      tintColor={animateColor()}\n    />\n  );\n};\n\nexport default AnimatedCircularProgress;\n"]}