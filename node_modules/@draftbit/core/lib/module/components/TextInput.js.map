{"version":3,"sources":["TextInput.tsx"],"names":["React","TextInput","NativeTextInput","usePrevious","initialValue","onChangeText","props","previousInitialValue","useEffect"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAS,IAAIC,eAAtB,QAA6C,cAA7C;AACA,SAASC,WAAT,QAA4B,UAA5B;;AAOA,MAAMF,SAA0B,GAAG,CAAC;AAClCG,EAAAA,YADkC;AAElCC,EAAAA,YAFkC;AAGlC,KAAGC;AAH+B,CAAD,KAI7B;AACJ,QAAMC,oBAAoB,GAAGJ,WAAW,CAACC,YAAD,CAAxC;AACAJ,EAAAA,KAAK,CAACQ,SAAN,CAAgB,MAAM;AACpB,QAAIJ,YAAY,KAAKG,oBAArB,EAA2C;AACzCF,MAAAA,YAAY,CAACD,YAAD,CAAZ;AACD;AACF,GAJD,EAIG,CAACA,YAAD,EAAeG,oBAAf,EAAqCF,YAArC,CAJH;AAMA,sBAAO,oBAAC,eAAD;AAAiB,IAAA,YAAY,EAAEA;AAA/B,KAAiDC,KAAjD,EAAP;AACD,CAbD;;AAeA,eAAeL,SAAf","sourcesContent":["import React from \"react\";\nimport { TextInput as NativeTextInput } from \"react-native\";\nimport { usePrevious } from \"../hooks\";\n\ninterface Props {\n  initialValue?: string;\n  onChangeText: (value?: string) => void;\n}\n\nconst TextInput: React.FC<Props> = ({\n  initialValue,\n  onChangeText,\n  ...props\n}) => {\n  const previousInitialValue = usePrevious(initialValue);\n  React.useEffect(() => {\n    if (initialValue !== previousInitialValue) {\n      onChangeText(initialValue);\n    }\n  }, [initialValue, previousInitialValue, onChangeText]);\n\n  return <NativeTextInput onChangeText={onChangeText} {...props} />;\n};\n\nexport default TextInput;\n"]}