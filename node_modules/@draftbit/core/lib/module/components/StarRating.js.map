{"version":3,"sources":["StarRating.tsx"],"names":["React","View","StyleSheet","withTheme","COMPONENT_TYPES","createStaticNumberProp","createNumberProp","StarRating","Icon","starSize","maxStars","rating","theme","style","rest","ratingRounded","Math","round","styles","container","Array","map","_","i","colors","primary","divider","create","flexDirection","alignItems","SEED_DATA","name","tag","description","category","basic","props","label","defaultValue","min","max","step"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,IAAT,EAAeC,UAAf,QAAuD,cAAvD;AACA,SAASC,SAAT,QAA0B,YAA1B;AAIA,SACEC,eADF,EAEEC,sBAFF,EAGEC,gBAHF,QAIO,iBAJP;;AAcA,MAAMC,UAA2B,GAAG,CAAC;AACnCC,EAAAA,IADmC;AAEnCC,EAAAA,QAAQ,GAAG,EAFwB;AAGnCC,EAAAA,QAAQ,GAAG,CAHwB;AAInCC,EAAAA,MAAM,GAAG,CAJ0B;AAKnCC,EAAAA,KALmC;AAMnCC,EAAAA,KANmC;AAOnC,KAAGC;AAPgC,CAAD,KAQ9B;AACJ,QAAMC,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWN,MAAM,GAAG,CAApB,IAAyB,CAA/C;AAEA,sBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACO,MAAM,CAACC,SAAR,EAAmBN,KAAnB;AAAb,KAA4CC,IAA5C,GACG,CAAC,GAAGM,KAAK,CAACV,QAAD,CAAT,EAAqBW,GAArB,CAAyB,CAACC,CAAD,EAAIC,CAAJ,kBACxB,oBAAC,IAAD;AACE,IAAA,GAAG,EAAEA,CADP;AAEE,IAAA,IAAI,EACFR,aAAa,GAAGQ,CAAhB,KAAsB,GAAtB,GACI,yBADJ,GAEI,oBALR;AAOE,IAAA,IAAI,EAAEd,QAPR;AAQE,IAAA,KAAK,EACHM,aAAa,GAAGQ,CAAhB,GAAoBX,KAAK,CAACY,MAAN,CAAaC,OAAjC,GAA2Cb,KAAK,CAACY,MAAN,CAAaE;AAT5D,IADD,CADH,CADF;AAkBD,CA7BD;;AA+BA,MAAMR,MAAM,GAAGhB,UAAU,CAACyB,MAAX,CAAkB;AAC/BR,EAAAA,SAAS,EAAE;AACTS,IAAAA,aAAa,EAAE,KADN;AAETC,IAAAA,UAAU,EAAE;AAFH;AADoB,CAAlB,CAAf;AAOA,eAAe1B,SAAS,CAACI,UAAD,CAAxB;AAEA,OAAO,MAAMuB,SAAS,GAAG;AACvBC,EAAAA,IAAI,EAAE,aADiB;AAEvBC,EAAAA,GAAG,EAAE,YAFkB;AAGvBC,EAAAA,WAAW,EAAE,yBAHU;AAIvBC,EAAAA,QAAQ,EAAE9B,eAAe,CAAC+B,KAJH;AAKvBC,EAAAA,KAAK,EAAE;AACL3B,IAAAA,QAAQ,EAAEJ,sBAAsB,CAAC;AAC/BgC,MAAAA,KAAK,EAAE,WADwB;AAE/BJ,MAAAA,WAAW,EAAE,8BAFkB;AAG/BK,MAAAA,YAAY,EAAE,EAHiB;AAI/BC,MAAAA,GAAG,EAAE,CAJ0B;AAK/BC,MAAAA,GAAG,EAAE,EAL0B;AAM/BC,MAAAA,IAAI,EAAE;AANyB,KAAD,CAD3B;AASL/B,IAAAA,QAAQ,EAAEL,sBAAsB,CAAC;AAC/BgC,MAAAA,KAAK,EAAE,WADwB;AAE/BJ,MAAAA,WAAW,EAAE,yBAFkB;AAG/BK,MAAAA,YAAY,EAAE,CAHiB;AAI/BC,MAAAA,GAAG,EAAE,CAJ0B;AAK/BC,MAAAA,GAAG,EAAE,EAL0B;AAM/BC,MAAAA,IAAI,EAAE;AANyB,KAAD,CAT3B;AAiBL9B,IAAAA,MAAM,EAAEL,gBAAgB,CAAC;AACvB+B,MAAAA,KAAK,EAAE,QADgB;AAEvBJ,MAAAA,WAAW,EAAE,+CAFU;AAGvBM,MAAAA,GAAG,EAAE,CAHkB;AAIvBC,MAAAA,GAAG,EAAE,EAJkB;AAKvBC,MAAAA,IAAI,EAAE;AALiB,KAAD;AAjBnB;AALgB,CAAlB","sourcesContent":["import * as React from \"react\";\nimport { View, StyleSheet, StyleProp, ViewStyle } from \"react-native\";\nimport { withTheme } from \"../theming\";\nimport type { Theme } from \"../styles/DefaultTheme\";\nimport type { IconSlot } from \"../interfaces/Icon\";\n\nimport {\n  COMPONENT_TYPES,\n  createStaticNumberProp,\n  createNumberProp,\n} from \"@draftbit/types\";\n\ntype Props = {\n  starSize?: number;\n  maxStars?: number;\n  rating?: number;\n  theme: Theme;\n  style?: StyleProp<ViewStyle>;\n} & IconSlot;\n\nconst StarRating: React.FC<Props> = ({\n  Icon,\n  starSize = 16,\n  maxStars = 5,\n  rating = 0,\n  theme,\n  style,\n  ...rest\n}) => {\n  const ratingRounded = Math.round(rating * 2) / 2;\n\n  return (\n    <View style={[styles.container, style]} {...rest}>\n      {[...Array(maxStars)].map((_, i) => (\n        <Icon\n          key={i}\n          name={\n            ratingRounded - i === 0.5\n              ? \"MaterialIcons/star-half\"\n              : \"MaterialIcons/star\"\n          }\n          size={starSize}\n          color={\n            ratingRounded > i ? theme.colors.primary : theme.colors.divider\n          }\n        />\n      ))}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n});\n\nexport default withTheme(StarRating);\n\nexport const SEED_DATA = {\n  name: \"Star Rating\",\n  tag: \"StarRating\",\n  description: \"A star rating component\",\n  category: COMPONENT_TYPES.basic,\n  props: {\n    starSize: createStaticNumberProp({\n      label: \"Star size\",\n      description: \"Size of each individual star\",\n      defaultValue: 16,\n      min: 8,\n      max: 36,\n      step: 1,\n    }),\n    maxStars: createStaticNumberProp({\n      label: \"Max stars\",\n      description: \"The max number of stars\",\n      defaultValue: 5,\n      min: 0,\n      max: 10,\n      step: 1,\n    }),\n    rating: createNumberProp({\n      label: \"Rating\",\n      description: \"The number of stars that should be colored in\",\n      min: 0,\n      max: 10,\n      step: 1,\n    }),\n  },\n};\n"]}