{"version":3,"sources":["Portal.tsx"],"names":["React","PortalConsumer","PortalHost","PortalContext","ThemeProvider","withTheme","Portal","Component","render","children","theme","props","manager"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,UAAP,IAAqBC,aAArB,QAAyD,cAAzD;AACA,SAASC,aAAT,EAAwBC,SAAxB,QAAyC,eAAzC;;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAN,SAAqBN,KAAK,CAACO,SAA3B,CAA4C;AAC1C;AAGAC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAAsB,KAAKC,KAAjC;AAEA,wBACE,oBAAC,aAAD,CAAe,QAAf,QACIC,OAAD,iBACC,oBAAC,cAAD;AAAgB,MAAA,OAAO,EAAEA;AAAzB,oBACE,oBAAC,aAAD;AAAe,MAAA,KAAK,EAAEF;AAAtB,OAA8BD,QAA9B,CADF,CAFJ,CADF;AASD;;AAhByC;;gBAAtCH,M,UAEUJ,U;;AAiBhB,eAAeG,SAAS,CAACC,MAAD,CAAxB","sourcesContent":["import * as React from \"react\";\nimport PortalConsumer from \"./PortalConsumer\";\nimport PortalHost, { PortalContext, PortalMethods } from \"./PortalHost\";\nimport { ThemeProvider, withTheme } from \"../../theming\";\nimport type { Theme } from \"../../styles/DefaultTheme\";\n\ntype Props = {\n  /**\n   * Content of the `Portal`.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Portal allows to render a component at a different place in the parent tree.\n * You can use it to render content which should appear above other elements, similar to `Modal`.\n * It requires a [`Portal.Host`](portal-host.html) component to be rendered somewhere in the parent tree.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Portal, Text } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   render() {\n *     return (\n *       <Portal>\n *         <Text>This is rendered at a different place</Text>\n *       </Portal>\n *     );\n *   }\n * }\n * ```\n */\nclass Portal extends React.Component<Props> {\n  // @component ./PortalHost.tsx\n  static Host = PortalHost;\n\n  render() {\n    const { children, theme } = this.props;\n\n    return (\n      <PortalContext.Consumer>\n        {(manager) => (\n          <PortalConsumer manager={manager as PortalMethods}>\n            <ThemeProvider theme={theme}>{children}</ThemeProvider>\n          </PortalConsumer>\n        )}\n      </PortalContext.Consumer>\n    );\n  }\n}\n\nexport default withTheme(Portal);\n"]}