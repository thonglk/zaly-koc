function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* Copied from https://github.com/callstack/react-native-paper/blob/main/src/components/Surface.tsx */
import * as React from "react";
import { Animated, StyleSheet, View } from "react-native";
import shadow from "../styles/shadow";
import overlay from "../styles/overlay";
import { withTheme } from "../theming";
import { COMPONENT_TYPES, createElevationType } from "@draftbit/types";

const Surface = ({
  elevation,
  style,
  theme,
  children,
  ...rest
}) => {
  const {
    elevation: styleElevation = 3,
    borderRadius: radius
  } = StyleSheet.flatten(style) || {};
  const {
    dark: isDarkTheme,
    mode,
    colors
  } = theme;
  const borderRadius = radius || theme.roundness;
  const ele = elevation || styleElevation;
  return /*#__PURE__*/React.createElement(Animated.View, _extends({}, rest, {
    style: [{
      minHeight: 40,
      borderRadius,
      backgroundColor: isDarkTheme && mode === "adaptive" ? overlay(ele, colors.surface) : colors.surface
    }, elevation ? shadow(elevation) : null, style]
  }), /*#__PURE__*/React.createElement(View, {
    style: {
      overflow: "hidden",
      borderRadius
    }
  }, children));
};

export default withTheme(Surface);
export const SEED_DATA = {
  name: "Surface",
  tag: "Surface",
  description: "An elevated container",
  category: COMPONENT_TYPES.layout,
  layout: {},
  props: {
    elevation: createElevationType(0)
  }
};
//# sourceMappingURL=Surface.js.map