{"version":3,"sources":["Image.tsx"],"names":["React","Image","NativeImage","StyleSheet","Config","COMPONENT_TYPES","createImageProp","createResizeModeProp","AspectRatio","generateDimensions","aspectRatio","width","height","source","resizeMode","style","props","imageSource","undefined","placeholderImageURL","styles","flatten","SEED_DATA","name","tag","description","category","media","layout"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,KAAK,IAAIC,WADX,EAGEC,UAHF,QAKO,cALP;AAMA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SACEC,eADF,EAEEC,eAFF,EAGEC,oBAHF,QAIO,iBAJP;AAMA,OAAOC,WAAP,MAAwB,eAAxB;;AAQA,MAAMC,kBAAkB,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,KAAf;AAAsBC,EAAAA;AAAtB,CAAD,KAAoD;AAC7E,MAAIF,WAAW,IAAI,CAACC,KAAhB,IAAyB,CAACC,MAA9B,EAAsC;AACpC,WAAO;AACLF,MAAAA,WADK;AAELC,MAAAA,KAAK,EAAE;AAFF,KAAP;AAID;;AAED,MAAID,WAAW,IAAIE,MAAnB,EAA2B;AACzB,WAAO;AACLF,MAAAA,WADK;AAELE,MAAAA,MAFK;AAGLD,MAAAA,KAAK,EAAED,WAAW,GAAGE;AAHhB,KAAP;AAKD;;AAED,MAAIF,WAAW,IAAIC,KAAnB,EAA0B;AACxB,WAAO;AACLD,MAAAA,WADK;AAELC,MAAAA,KAFK;AAGLC,MAAAA,MAAM,EAAED,KAAK,GAAGD;AAHX,KAAP;AAKD;;AAED,SAAO;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAP;AACD,CAzBD;;AA2BA,MAAMX,KAA2B,GAAG,CAAC;AACnCY,EAAAA,MADmC;AAEnCC,EAAAA,UAAU,GAAG,OAFsB;AAGnCC,EAAAA,KAHmC;AAInC,KAAGC;AAJgC,CAAD,KAK9B;AACJ,MAAIC,WAAW,GACbJ,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAKK,SAA9B,GACId,MAAM,CAACe,mBADX,GAEIN,MAHN;AAKA,QAAMO,MAAM,GAAGjB,UAAU,CAACkB,OAAX,CAAmBN,KAAK,IAAI,EAA5B,CAAf;AACA,QAAM;AAAEL,IAAAA,WAAF;AAAeC,IAAAA,KAAf;AAAsBC,IAAAA;AAAtB,MAAiCH,kBAAkB,CACvDW,MADuD,CAAzD;;AAIA,MAAIV,WAAJ,EAAiB;AACf,wBACE,oBAAC,WAAD;AAAa,MAAA,KAAK,EAAE,CAACK,KAAD,EAAQ;AAAEJ,QAAAA,KAAF;AAASC,QAAAA,MAAT;AAAiBF,QAAAA;AAAjB,OAAR;AAApB,oBACE,oBAAC,WAAD,eACMM,KADN;AAEE,MAAA,MAAM,EAAEC,WAFV;AAGE,MAAA,UAAU,EAAEH,UAHd;AAIE,MAAA,KAAK,EAAE,CACLC,KADK,EAEL;AACEH,QAAAA,MAAM,EAAE,MADV;AAEED,QAAAA,KAAK,EAAE;AAFT,OAFK;AAJT,OADF,CADF;AAgBD;;AAED,sBACE,oBAAC,WAAD,eACMK,KADN;AAEE,IAAA,MAAM,EAAEH,MAFV;AAGE,IAAA,UAAU,EAAEC,UAHd;AAIE,IAAA,KAAK,EAAEC;AAJT,KADF;AAQD,CA3CD;;AA6CA,eAAed,KAAf;AAEA,OAAO,MAAMqB,SAAS,GAAG;AACvBC,EAAAA,IAAI,EAAE,OADiB;AAEvBC,EAAAA,GAAG,EAAE,OAFkB;AAGvBC,EAAAA,WAAW,EAAE,yBAHU;AAIvBC,EAAAA,QAAQ,EAAErB,eAAe,CAACsB,KAJH;AAKvBC,EAAAA,MAAM,EAAE;AACNjB,IAAAA,KAAK,EAAE,GADD;AAENC,IAAAA,MAAM,EAAE;AAFF,GALe;AASvBI,EAAAA,KAAK,EAAE;AACLH,IAAAA,MAAM,EAAEP,eAAe,EADlB;AAELQ,IAAAA,UAAU,EAAEP,oBAAoB;AAF3B;AATgB,CAAlB","sourcesContent":["/* README: Internal Image component used for stuff like Card. DO NOT EXPORT! */\nimport React from \"react\";\nimport {\n  Image as NativeImage,\n  ImageProps,\n  StyleSheet,\n  ImageSourcePropType,\n} from \"react-native\";\nimport Config from \"./Config\";\nimport {\n  COMPONENT_TYPES,\n  createImageProp,\n  createResizeModeProp,\n} from \"@draftbit/types\";\n\nimport AspectRatio from \"./AspectRatio\";\n\ntype ImageStyleProp = {\n  width?: number;\n  height?: number;\n  aspectRatio?: number;\n};\n\nconst generateDimensions = ({ aspectRatio, width, height }: ImageStyleProp) => {\n  if (aspectRatio && !width && !height) {\n    return {\n      aspectRatio,\n      width: \"100%\",\n    };\n  }\n\n  if (aspectRatio && height) {\n    return {\n      aspectRatio,\n      height,\n      width: aspectRatio * height,\n    };\n  }\n\n  if (aspectRatio && width) {\n    return {\n      aspectRatio,\n      width,\n      height: width / aspectRatio,\n    };\n  }\n\n  return { width, height };\n};\n\nconst Image: React.FC<ImageProps> = ({\n  source,\n  resizeMode = \"cover\",\n  style,\n  ...props\n}) => {\n  let imageSource =\n    source === null || source === undefined\n      ? Config.placeholderImageURL\n      : source;\n\n  const styles = StyleSheet.flatten(style || {});\n  const { aspectRatio, width, height } = generateDimensions(\n    styles as ImageStyleProp\n  );\n\n  if (aspectRatio) {\n    return (\n      <AspectRatio style={[style, { width, height, aspectRatio }]}>\n        <NativeImage\n          {...props}\n          source={imageSource as ImageSourcePropType}\n          resizeMode={resizeMode}\n          style={[\n            style,\n            {\n              height: \"100%\",\n              width: \"100%\",\n            },\n          ]}\n        />\n      </AspectRatio>\n    );\n  }\n\n  return (\n    <NativeImage\n      {...props}\n      source={source as ImageSourcePropType}\n      resizeMode={resizeMode}\n      style={style}\n    />\n  );\n};\n\nexport default Image;\n\nexport const SEED_DATA = {\n  name: \"Image\",\n  tag: \"Image\",\n  description: \"A basic Image Component\",\n  category: COMPONENT_TYPES.media,\n  layout: {\n    width: 250,\n    height: 250,\n  },\n  props: {\n    source: createImageProp(),\n    resizeMode: createResizeModeProp(),\n  },\n};\n"]}