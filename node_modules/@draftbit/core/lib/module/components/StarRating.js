function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import * as React from "react";
import { View, StyleSheet } from "react-native";
import { withTheme } from "../theming";
import { COMPONENT_TYPES, createStaticNumberProp, createNumberProp } from "@draftbit/types";

const StarRating = ({
  Icon,
  starSize = 16,
  maxStars = 5,
  rating = 0,
  theme,
  style,
  ...rest
}) => {
  const ratingRounded = Math.round(rating * 2) / 2;
  return /*#__PURE__*/React.createElement(View, _extends({
    style: [styles.container, style]
  }, rest), [...Array(maxStars)].map((_, i) => /*#__PURE__*/React.createElement(Icon, {
    key: i,
    name: ratingRounded - i === 0.5 ? "MaterialIcons/star-half" : "MaterialIcons/star",
    size: starSize,
    color: ratingRounded > i ? theme.colors.primary : theme.colors.divider
  })));
};

const styles = StyleSheet.create({
  container: {
    flexDirection: "row",
    alignItems: "center"
  }
});
export default withTheme(StarRating);
export const SEED_DATA = {
  name: "Star Rating",
  tag: "StarRating",
  description: "A star rating component",
  category: COMPONENT_TYPES.basic,
  props: {
    starSize: createStaticNumberProp({
      label: "Star size",
      description: "Size of each individual star",
      defaultValue: 16,
      min: 8,
      max: 36,
      step: 1
    }),
    maxStars: createStaticNumberProp({
      label: "Max stars",
      description: "The max number of stars",
      defaultValue: 5,
      min: 0,
      max: 10,
      step: 1
    }),
    rating: createNumberProp({
      label: "Rating",
      description: "The number of stars that should be colored in",
      min: 0,
      max: 10,
      step: 1
    })
  }
};
//# sourceMappingURL=StarRating.js.map