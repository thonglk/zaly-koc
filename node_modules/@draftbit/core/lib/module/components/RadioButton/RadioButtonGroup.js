function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import * as React from "react";
import { View } from "react-native";
import { COMPONENT_TYPES, createFieldNameProp, createDirectionProp } from "@draftbit/types";
import { radioButtonGroupContext, Direction } from "./context";
import { usePrevious } from "../../hooks";
const {
  Provider
} = radioButtonGroupContext;

const RadioButtonGroup = ({
  direction = Direction.Vertical,
  value,
  onValueChange = () => {},
  initialValue,
  style,
  children,
  ...rest
}) => {
  const previousInitialValue = usePrevious(initialValue);
  React.useEffect(() => {
    if (initialValue !== previousInitialValue) {
      onValueChange(initialValue);
    }
  }, [initialValue, previousInitialValue, onValueChange]);
  const _containerStyle = [{
    flexDirection: direction === Direction.Horizontal ? "row" : "column"
  }];

  if (direction !== Direction.Vertical) {
    _containerStyle.push({
      alignItems: "center"
    });
  }

  return /*#__PURE__*/React.createElement(View, _extends({
    style: [{
      minHeight: 40
    }, style]
  }, rest), /*#__PURE__*/React.createElement(Provider, {
    value: {
      value,
      onValueChange,
      direction
    }
  }, /*#__PURE__*/React.createElement(View, {
    style: _containerStyle
  }, children)));
};

export default RadioButtonGroup;
export const SEED_DATA = {
  name: "Radio Button Group",
  tag: "RadioButtonGroup",
  category: COMPONENT_TYPES.input,
  layout: {},
  props: {
    direction: createDirectionProp(),
    fieldName: createFieldNameProp({
      handlerPropName: "onValueChange",
      valuePropName: "value",
      defaultValue: "radioButtonGroupValue"
    })
  }
};
//# sourceMappingURL=RadioButtonGroup.js.map