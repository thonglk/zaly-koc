{"version":3,"sources":["RadioButtonRow.tsx"],"names":["React","StyleSheet","View","Platform","RadioButton","Text","useRadioButtonGroupContext","createTextProp","createTextEnumProp","COMPONENT_TYPES","createColorProp","GROUPS","Direction","GroupDirection","Touchable","extractStyles","getRadioButtonAlignment","parentDirection","direction","Horizontal","Row","RowReverse","renderLabel","value","labelStyle","textStyle","RadioButtonRow","Icon","label","color","unselectedColor","onPress","labelContainerStyle","radioButtonStyle","selected","disabled","style","rest","contextValue","onValueChange","handlePress","textStyles","viewStyles","styles","mainParent","flexDirection","alignItems","flex","create","justifyContent","paddingStart","minHeight","paddingEnd","select","web","cursor","userSelect","SEED_DATA","name","tag","category","input","layout","props","description","required","defaultValue","options","group","basic"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {\n  StyleProp,\n  ViewStyle,\n  StyleSheet,\n  TextStyle,\n  View,\n  Platform,\n} from \"react-native\";\nimport RadioButton, { RadioButtonProps } from \"./RadioButton\";\nimport Text from \"../Text\";\nimport { useRadioButtonGroupContext } from \"./context\";\nimport {\n  createTextProp,\n  createTextEnumProp,\n  COMPONENT_TYPES,\n  createColorProp,\n  GROUPS,\n} from \"@draftbit/types\";\nimport type { IconSlot } from \"../../interfaces/Icon\";\nimport { Direction as GroupDirection } from \"./context\";\nimport Touchable from \"../Touchable\";\nimport { extractStyles } from \"../../utilities\";\n\nexport enum Direction {\n  Row = \"row\",\n  RowReverse = \"row-reverse\",\n}\n\nexport interface RadioButtonRowProps extends Omit<RadioButtonProps, \"onPress\"> {\n  label: string | React.ReactNode;\n  value: string;\n  color?: string;\n  unselectedColor?: string;\n  labelContainerStyle: StyleProp<ViewStyle>;\n  radioButtonStyle?: StyleProp<ViewStyle>;\n  labelStyle?: StyleProp<TextStyle>;\n  onPress?: (value: string) => void;\n  direction?: Direction;\n}\n\nconst getRadioButtonAlignment = (\n  parentDirection: GroupDirection | undefined,\n  direction: Direction\n) => {\n  if (parentDirection === GroupDirection.Horizontal) {\n    return direction === Direction.Row ? \"flex-start\" : \"flex-end\";\n  } else if (direction === Direction.RowReverse) {\n    return \"flex-start\";\n  } else {\n    return \"flex-end\";\n  }\n};\n\nconst renderLabel = (\n  value: string | React.ReactNode,\n  labelStyle: StyleProp<TextStyle>,\n  textStyle: StyleProp<TextStyle>\n) => {\n  if (typeof value === \"string\") {\n    return <Text style={[labelStyle, textStyle]}>{value}</Text>;\n  } else {\n    return <>{value}</>;\n  }\n};\n\nconst RadioButtonRow: React.FC<RadioButtonRowProps & IconSlot> = ({\n  Icon,\n  label,\n  value,\n  color,\n  unselectedColor,\n  onPress = () => {},\n  labelContainerStyle,\n  labelStyle,\n  radioButtonStyle,\n  direction = Direction.Row,\n  selected,\n  disabled,\n  style,\n  ...rest\n}) => {\n  const {\n    value: contextValue,\n    onValueChange,\n    direction: parentDirection,\n  } = useRadioButtonGroupContext();\n\n  const handlePress = () => {\n    onPress(value);\n    onValueChange && onValueChange(value);\n  };\n\n  const { textStyles, viewStyles } = extractStyles(style);\n\n  return (\n    <Touchable\n      onPress={handlePress}\n      style={[styles.mainParent, { flexDirection: direction }, viewStyles]}\n      disabled={disabled}\n      {...rest}\n    >\n      <View\n        style={[\n          styles.label,\n          {\n            alignItems: direction === Direction.Row ? \"flex-start\" : \"flex-end\",\n          },\n          labelContainerStyle,\n        ]}\n      >\n        {renderLabel(label, labelStyle, textStyles)}\n      </View>\n      <View\n        style={{\n          flex: 1,\n          alignItems: getRadioButtonAlignment(parentDirection, direction),\n        }}\n      >\n        <RadioButton\n          Icon={Icon}\n          selected={\n            selected || (contextValue != null && contextValue === value)\n          }\n          color={color}\n          unselectedColor={unselectedColor}\n          onPress={handlePress}\n          style={radioButtonStyle}\n        />\n      </View>\n    </Touchable>\n  );\n};\n\nconst styles = StyleSheet.create({\n  mainParent: {\n    alignItems: \"center\",\n    justifyContent: \"space-around\",\n    paddingStart: 20,\n    minHeight: 50,\n    paddingEnd: 20,\n    flex: 1,\n    ...Platform.select({\n      web: {\n        cursor: \"pointer\",\n        userSelect: \"none\",\n      },\n    }),\n  },\n  label: {\n    flex: 3,\n  },\n});\n\nexport default RadioButtonRow;\n\nexport const SEED_DATA = {\n  name: \"Radio Button Row\",\n  tag: \"RadioButtonRow\",\n  category: COMPONENT_TYPES.input,\n  layout: {},\n  props: {\n    label: createTextProp({\n      label: \"Label\",\n      description: \"Label to show with the radio button\",\n      required: true,\n      defaultValue: \"First Option\",\n    }),\n    direction: createTextEnumProp({\n      label: \"Direction\",\n      description:\n        \"Whether the checkbox will appear on the left or on the right\",\n      options: [\"row\", \"row-reverse\"],\n    }),\n    value: createTextProp({\n      label: \"Value\",\n      description: \"Value of the radio button\",\n      defaultValue: null,\n      required: true,\n    }),\n    color: createColorProp({\n      group: GROUPS.basic,\n      description: \"Color for the button\",\n      defaultValue: \"primary\",\n    }),\n    unselectedColor: createColorProp({\n      group: GROUPS.basic,\n      label: \"Unselected Color\",\n      description: \"Unselected Color for the button\",\n      defaultValue: \"primary\",\n    }),\n  },\n};\n"]}