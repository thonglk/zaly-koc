{"version":3,"sources":["AccordionGroup.tsx"],"names":["AccordionGroup","Icon","openColor","closedColor","caretColor","icon","iconSize","style","label","children","expanded","expandedProp","theme","rest","setExpanded","React","useState","handlePressAction","undefined","expandedInternal","expandedColor","colors","primary","collapsedColor","divider","labelColor","styles","container","row","backgroundColor","item","content","color","Children","map","child","isValidElement","props","left","right","cloneElement","StyleSheet","create","padding","flexDirection","alignItems","fontSize","margin","paddingLeft","flex","justifyContent","SEED_DATA","name","tag","description","category","COMPONENT_TYPES","defaultValue"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {\n  View,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  Pressable,\n} from \"react-native\";\nimport Text from \"../Text\";\nimport { withTheme } from \"../../theming\";\nimport type { IconSlot } from \"../../interfaces/Icon\";\nimport type { Theme } from \"../../styles/DefaultTheme\";\n\nimport {\n  COMPONENT_TYPES,\n  createNumberProp,\n  createIconProp,\n  createTextProp,\n  createStaticBoolProp,\n  createColorProp,\n} from \"@draftbit/types\";\n\ntype Props = {\n  openColor: string;\n  closedColor: string;\n  caretColor: string;\n  icon?: string;\n  iconSize: number;\n  style?: StyleProp<TextStyle>;\n  children: React.ReactNode;\n  label: string;\n  expanded?: boolean;\n  theme: Theme;\n} & IconSlot;\n\nconst AccordionGroup = ({\n  Icon,\n  openColor,\n  closedColor,\n  caretColor,\n  icon,\n  iconSize = 24,\n  style,\n  label,\n  children,\n  expanded: expandedProp,\n  theme,\n  ...rest\n}: Props) => {\n  const [expanded, setExpanded] = React.useState<boolean>(\n    expandedProp || false\n  );\n\n  const handlePressAction = () => {\n    if (expandedProp === undefined) {\n      setExpanded(!expanded);\n    }\n  };\n\n  const expandedInternal = expandedProp !== undefined ? expandedProp : expanded;\n\n  const expandedColor = openColor || theme.colors.primary;\n  const collapsedColor = closedColor || theme.colors.divider;\n\n  const labelColor = expanded ? expandedColor : collapsedColor;\n\n  return (\n    <View {...rest}>\n      <Pressable\n        style={[styles.container, style]}\n        onPress={handlePressAction}\n        accessibilityRole=\"button\"\n      >\n        <View style={[styles.row, { backgroundColor: caretColor }]}>\n          {icon ? (\n            <Icon name={icon} size={iconSize} color={labelColor} />\n          ) : null}\n          <View style={[styles.item, styles.content]}>\n            <Text\n              selectable={false}\n              style={[\n                styles.label,\n                {\n                  color: labelColor,\n                },\n                style,\n              ]}\n            >\n              {label}\n            </Text>\n          </View>\n          <View style={[styles.item]}>\n            <Icon\n              name={\n                expanded\n                  ? \"MaterialIcons/keyboard-arrow-up\"\n                  : \"MaterialIcons/keyboard-arrow-down\"\n              }\n              color={labelColor}\n              size={24}\n            />\n          </View>\n        </View>\n      </Pressable>\n      {expandedInternal\n        ? React.Children.map(children, (child) => {\n            if (\n              React.isValidElement(child) &&\n              !child.props.left &&\n              !child.props.right\n            ) {\n              return React.cloneElement(child, {\n                style: [styles.child, child.props.style],\n              });\n            }\n\n            return child;\n          })\n        : null}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n\n  label: {\n    fontSize: 16,\n  },\n\n  item: {\n    margin: 8,\n  },\n  child: {\n    paddingLeft: 64,\n  },\n  content: {\n    flex: 1,\n    justifyContent: \"center\",\n  },\n});\n\nexport default withTheme(AccordionGroup);\n\nexport const SEED_DATA = {\n  name: \"Accordion Group\",\n  tag: \"AccordionGroup\",\n  description: \"An expandable container containing components\",\n  category: COMPONENT_TYPES.container,\n  props: {\n    openColor: createColorProp({\n      label: \"Color when expanded\",\n    }),\n    closedColor: createColorProp({\n      label: \"Color when collapsed\",\n    }),\n    caretColor: createColorProp({\n      label: \"Color of caret\",\n    }),\n\n    iconSize: createNumberProp({\n      defaultValue: 24,\n    }),\n\n    label: createTextProp({\n      label: \"Accordion label\",\n    }),\n    expanded: createStaticBoolProp({\n      label: \"Whether the AccordionGroup should be expanded or not\",\n    }),\n    icon: createIconProp(),\n  },\n};\n"]}