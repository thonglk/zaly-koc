"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Center = Center;
exports.Circle = Circle;
exports.Square = Square;
exports.Row = Row;
exports.Spacer = Spacer;
exports.Stack = Stack;
exports.SEED_DATA = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _types = require("@draftbit/types");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function Center({
  width = 240,
  height = 200,
  children,
  bgColor,
  style,
  ...rest
}) {
  return /*#__PURE__*/React.createElement(_reactNative.View, _extends({
    style: [{
      justifyContent: "center",
      alignItems: "center",
      width,
      height,
      backgroundColor: bgColor
    }, style]
  }, rest), children);
}

function Circle({
  size = 50,
  bgColor,
  children,
  style,
  ...rest
}) {
  const borderRadius = 1000;
  return /*#__PURE__*/React.createElement(Center, _extends({
    width: size,
    height: size,
    bgColor: bgColor,
    style: [style, {
      backgroundColor: bgColor,
      borderRadius,
      overflow: "hidden"
    }]
  }, rest), children);
}

function Square({
  size = 50,
  bgColor,
  children,
  style,
  ...rest
}) {
  return /*#__PURE__*/React.createElement(Center, _extends({
    style: style,
    width: size,
    height: size,
    bgColor: bgColor
  }, rest), children);
}

function Row({
  justifyContent,
  alignItems,
  children,
  style,
  ...rest
}) {
  return /*#__PURE__*/React.createElement(_reactNative.View, _extends({
    style: [style, // style goes first b/c we can't override these
    {
      alignItems,
      flexDirection: "row",
      justifyContent: justifyContent
    }]
  }, rest), children);
}

function Spacer({
  top = 8,
  right = 8,
  bottom = 8,
  left = 8,
  children,
  style,
  ...rest
}) {
  return /*#__PURE__*/React.createElement(_reactNative.View, _extends({
    style: [style, {
      paddingRight: right,
      paddingTop: top,
      paddingLeft: left,
      paddingBottom: bottom
    }]
  }, rest), children);
}

function Stack({
  children,
  justifyContent = "flex-start",
  alignItems = "flex-start",
  style,
  ...rest
}) {
  return (
    /*#__PURE__*/
    // style must go first since we don't want justifyContent, alignItems overridden
    React.createElement(_reactNative.View, _extends({
      style: [style, {
        justifyContent,
        alignItems
      }]
    }, rest), children)
  );
}

const SEED_DATA = [{
  name: "Row",
  tag: "Row",
  category: _types.COMPONENT_TYPES.layout,
  props: {
    justifyContent: {
      label: "Align Horizontally",
      group: _types.GROUPS.style,
      description: "Align Items Horizontally (on the X Axis)",
      formType: _types.FORM_TYPES.string,
      propType: _types.PROP_TYPES.STRING,
      defaultValue: "flex-start",
      editable: true,
      required: false
    },
    alignItems: {
      label: "Align Vertically",
      group: _types.GROUPS.style,
      description: "Align Items Vertically (on the Y Axis)",
      formType: _types.FORM_TYPES.string,
      propType: _types.PROP_TYPES.STRING,
      defaultValue: "flex-start",
      editable: true,
      required: false
    }
  }
}, {
  name: "Spacer",
  tag: "Spacer",
  category: _types.COMPONENT_TYPES.layout,
  props: {
    top: {
      label: "Top",
      description: "Top",
      formType: _types.FORM_TYPES.number,
      propType: _types.PROP_TYPES.NUMBER,
      group: _types.GROUPS.style,
      defaultValue: 8,
      editable: true,
      required: false
    },
    right: {
      label: "Right",
      description: "Right",
      formType: _types.FORM_TYPES.number,
      propType: _types.PROP_TYPES.NUMBER,
      group: _types.GROUPS.style,
      defaultValue: 8,
      editable: true,
      required: false
    },
    bottom: {
      label: "Bottom",
      description: "Bottom",
      formType: _types.FORM_TYPES.number,
      propType: _types.PROP_TYPES.NUMBER,
      group: _types.GROUPS.style,
      defaultValue: 8,
      editable: true,
      required: false
    },
    left: {
      label: "Left",
      description: "Left",
      formType: _types.FORM_TYPES.number,
      propType: _types.PROP_TYPES.NUMBER,
      group: _types.GROUPS.style,
      defaultValue: 8,
      editable: true,
      required: false
    }
  }
}, {
  name: "Stack",
  tag: "Stack",
  category: _types.COMPONENT_TYPES.layout,
  props: {
    justifyContent: {
      group: _types.GROUPS.style,
      label: "Justify",
      description: "Justify horizontally",
      formType: _types.FORM_TYPES.string,
      propType: _types.PROP_TYPES.STRING,
      defaultValue: "flex-start",
      editable: true,
      required: false
    },
    alignItems: {
      group: _types.GROUPS.style,
      label: "Align",
      description: "Vertical align",
      formType: _types.FORM_TYPES.string,
      propType: _types.PROP_TYPES.STRING,
      defaultValue: "flex-start",
      editable: true,
      required: false
    }
  }
}, {
  name: "Center",
  tag: "Center",
  category: _types.COMPONENT_TYPES.layout,
  props: {
    width: {
      label: "Width",
      description: "Width",
      formType: _types.FORM_TYPES.number,
      propType: _types.PROP_TYPES.NUMBER,
      group: _types.GROUPS.style,
      defaultValue: 240,
      editable: true,
      required: false
    },
    height: {
      label: "Height",
      description: "Height",
      formType: _types.FORM_TYPES.number,
      propType: _types.PROP_TYPES.NUMBER,
      group: _types.GROUPS.style,
      defaultValue: 200,
      editable: true,
      required: false
    },
    bgColor: {
      label: "Background Color",
      description: "Background color",
      formType: _types.FORM_TYPES.color,
      propType: _types.PROP_TYPES.THEME,
      editable: true,
      required: false,
      defaultValue: "light",
      group: _types.GROUPS.style
    }
  }
}, {
  name: "Circle",
  tag: "Circle",
  category: _types.COMPONENT_TYPES.layout,
  props: {
    size: {
      label: "Size",
      description: "Size",
      formType: _types.FORM_TYPES.number,
      propType: _types.PROP_TYPES.NUMBER,
      group: _types.GROUPS.style,
      defaultValue: 50,
      editable: true,
      required: false
    },
    bgColor: {
      label: "Background Color",
      description: "Background color",
      formType: _types.FORM_TYPES.color,
      propType: _types.PROP_TYPES.THEME,
      editable: true,
      required: false,
      defaultValue: "light",
      group: _types.GROUPS.style
    }
  }
}, {
  name: "Square",
  tag: "Square",
  category: _types.COMPONENT_TYPES.layout,
  props: {
    size: {
      label: "Size",
      description: "Size",
      formType: _types.FORM_TYPES.number,
      propType: _types.PROP_TYPES.NUMBER,
      group: _types.GROUPS.style,
      defaultValue: 50,
      editable: true,
      required: false
    },
    bgColor: {
      label: "Background Color",
      description: "Background color",
      formType: _types.FORM_TYPES.color,
      propType: _types.PROP_TYPES.THEME,
      editable: true,
      required: false,
      defaultValue: "light",
      group: _types.GROUPS.style
    }
  }
}];
exports.SEED_DATA = SEED_DATA;
//# sourceMappingURL=Layout.js.map