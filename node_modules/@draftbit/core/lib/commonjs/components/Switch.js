"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SEED_DATA = exports.default = exports.SwitchRow = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _theming = require("../theming");

var _FormRow = _interopRequireDefault(require("./FormRow"));

var _types = require("@draftbit/types");

var _hooks = require("../hooks");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function Switch({
  value = false,
  initialValue,
  disabled,
  onValueChange,
  activeTrackColor,
  inactiveTrackColor,
  activeThumbColor,
  inactiveThumbColor,
  theme,
  style,
  ...rest
}) {
  const activeTrackThemeColor = activeTrackColor || theme.colors.primary;
  const inactiveTrackThemeColor = inactiveTrackColor || "#EEE";
  const activeThumbThemeColor = activeThumbColor || "#FFF";
  const inactiveThumbThemeColor = inactiveThumbColor || "#FFF";
  const [checked, setChecked] = React.useState(value);
  React.useEffect(() => {
    if (value !== checked) {
      setChecked(value);
    }
  }, [value, checked]);
  const previousInitialValue = (0, _hooks.usePrevious)(initialValue);
  React.useEffect(() => {
    if (initialValue !== previousInitialValue) {
      setChecked(initialValue);
      onValueChange && onValueChange(initialValue);
    }
  }, [initialValue, previousInitialValue, setChecked, onValueChange]);
  return /*#__PURE__*/React.createElement(_reactNative.Switch, _extends({
    value: checked,
    disabled: disabled,
    trackColor: {
      false: inactiveTrackThemeColor,
      true: activeTrackThemeColor
    },
    thumbColor: value ? activeThumbThemeColor : inactiveThumbThemeColor // @ts-ignore react-native-web only
    ,
    activeThumbColor: activeThumbThemeColor,
    ios_backgroundColor: inactiveTrackThemeColor,
    style: style,
    onValueChange: bool => {
      setChecked(bool);
      onValueChange && onValueChange(bool);
    }
  }, rest));
}

function Row({
  label = "Label",
  direction = _types.RowDirection.Row,
  style,
  value = false,
  disabled,
  onValueChange,
  activeTrackColor,
  inactiveTrackColor,
  activeThumbColor,
  inactiveThumbColor,
  theme,
  ...rest
}) {
  const [checked, setChecked] = React.useState(value);
  React.useEffect(() => {
    if (value !== checked) {
      setChecked(value);
    }
  }, [value, checked]);
  return /*#__PURE__*/React.createElement(_FormRow.default, _extends({
    disabled: disabled,
    onPress: () => {
      setChecked(!checked);
      onValueChange && onValueChange(!checked);
    },
    label: label,
    direction: direction,
    style: style
  }, rest), /*#__PURE__*/React.createElement(Switch, {
    theme: theme,
    value: checked,
    disabled: disabled,
    onValueChange: onValueChange,
    activeTrackColor: activeTrackColor,
    inactiveTrackColor: inactiveTrackColor,
    activeThumbColor: activeThumbColor,
    inactiveThumbColor: inactiveThumbColor
  }));
}

const SwitchRow = (0, _theming.withTheme)(Row);
exports.SwitchRow = SwitchRow;

var _default = (0, _theming.withTheme)(Switch);

exports.default = _default;
const SEED_DATA = [{
  name: "Switch",
  tag: "Switch",
  category: _types.COMPONENT_TYPES.input,
  layout: {},
  props: {
    disabled: (0, _types.createBoolProp)({
      label: "Disabled",
      description: "Boolean to handle disabling the switch"
    }),
    fieldName: (0, _types.createFieldNameProp)({
      handlerPropName: "onValueChange",
      valuePropName: "value",
      defaultValue: "switchValue"
    }),
    activeTrackColor: (0, _types.createColorProp)({
      label: "Active Track Color"
    }),
    inactiveTrackColor: (0, _types.createColorProp)({
      label: "Inactive Track Color"
    }),
    activeThumbColor: (0, _types.createColorProp)({
      label: "Active Thumb Color"
    }),
    inactiveThumbColor: (0, _types.createColorProp)({
      label: "Inactive Thumb Color"
    })
  }
}, {
  name: "Switch Row",
  tag: "SwitchRow",
  category: _types.COMPONENT_TYPES.input,
  layout: {},
  props: {
    label: (0, _types.createTextProp)({
      label: "Label",
      description: "Label to show with the checkbox",
      required: true,
      defaultValue: "First Option"
    }),
    direction: (0, _types.createRowDirectionProp)(),
    disabled: (0, _types.createBoolProp)({
      label: "Disabled",
      description: "Boolean to handle disabling the switch",
      group: _types.GROUPS.data
    }),
    fieldName: (0, _types.createFieldNameProp)({
      handlerPropName: "onValueChange",
      valuePropName: "value",
      defaultValue: "switchValue"
    }),
    activeTrackColor: (0, _types.createColorProp)({
      label: "Active Track Color"
    }),
    inactiveTrackColor: (0, _types.createColorProp)({
      label: "Inactive Track Color"
    }),
    activeThumbColor: (0, _types.createColorProp)({
      label: "Active Thumb Color"
    }),
    inactiveThumbColor: (0, _types.createColorProp)({
      label: "Inactive Thumb Color"
    })
  }
}];
exports.SEED_DATA = SEED_DATA;
//# sourceMappingURL=Switch.js.map