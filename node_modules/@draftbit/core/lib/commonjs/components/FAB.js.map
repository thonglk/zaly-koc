{"version":3,"sources":["FAB.tsx"],"names":["FAB","onPress","disabled","loading","iconName","style","theme","iconColor","bgColor","size","Icon","props","backgroundColor","colors","primary","color","width","height","borderRadius","overflow","radius","pressed","styles","button","opacity","StyleSheet","create","justifyContent","alignItems","Platform","select","web","cursor","userSelect","SEED_DATA","name","tag","category","COMPONENT_TYPES","description","layout","icon","defaultValue","label"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {\n  View,\n  StyleSheet,\n  Pressable,\n  ActivityIndicator,\n  StyleProp,\n  ViewStyle,\n  PressableProps,\n  Platform,\n} from \"react-native\";\nimport { withTheme } from \"../theming\";\nimport type { Theme } from \"../styles/DefaultTheme\";\nimport type { IconSlot } from \"../interfaces/Icon\";\n\nimport {\n  COMPONENT_TYPES,\n  createIconProp,\n  createActionProp,\n  createColorProp,\n} from \"@draftbit/types\";\n\ntype Props = {\n  disabled?: boolean;\n  loading?: boolean;\n  size?: number;\n  bgColor?: string;\n  iconColor?: string;\n  iconName?: string;\n  onPress: () => void;\n  theme: Theme;\n  style?: StyleProp<ViewStyle>;\n} & PressableProps &\n  IconSlot;\n\nconst FAB: React.FC<Props> = ({\n  onPress,\n  disabled,\n  loading,\n  iconName = \"MaterialIcons/add\",\n  style,\n  theme,\n  iconColor,\n  bgColor,\n  size = 50,\n  Icon,\n  ...props\n}) => {\n  const backgroundColor = bgColor || theme.colors.primary;\n  const color = iconColor || \"#FFF\";\n\n  return (\n    <View\n      style={[\n        {\n          width: size,\n          height: size,\n          borderRadius: size / 2,\n          overflow: \"hidden\",\n        },\n        style,\n      ]}\n    >\n      <Pressable\n        onPress={onPress}\n        disabled={loading || disabled}\n        android_ripple={{\n          color: \"#333\",\n          radius: size / 4,\n        }}\n        style={({ pressed }) => {\n          return [\n            styles.button,\n            {\n              opacity: pressed || disabled ? 0.75 : 1,\n              width: size,\n              height: size,\n              borderRadius: size / 2,\n              backgroundColor,\n            },\n          ];\n        }}\n        {...props}\n      >\n        <View>\n          {loading ? (\n            <ActivityIndicator size=\"small\" color={color} />\n          ) : (\n            <Icon name={iconName} size={28} color={color} />\n          )}\n        </View>\n      </Pressable>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    backgroundColor: \"#5a45ff\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    ...Platform.select({\n      web: {\n        cursor: \"pointer\",\n        userSelect: \"none\",\n      },\n    }),\n  },\n});\n\nexport default withTheme(FAB);\n\nexport const SEED_DATA = [\n  {\n    name: \"FAB\",\n    tag: \"FAB\",\n    category: COMPONENT_TYPES.button,\n    description: \"A round, mini FAB\",\n    layout: {},\n    props: {\n      onPress: createActionProp(),\n      icon: createIconProp({\n        defaultValue: null,\n      }),\n      iconColor: createColorProp({\n        label: \"Icon color\",\n        defaultValue: null,\n      }),\n      bgColor: createColorProp({\n        label: \"Bg color\",\n        defaultValue: null,\n      }),\n    },\n  },\n];\n"]}