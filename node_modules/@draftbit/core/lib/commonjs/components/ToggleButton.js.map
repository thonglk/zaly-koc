{"version":3,"sources":["ToggleButton.tsx"],"names":["ToggleButton","Icon","icon","toggled","onPress","initialValue","disabled","color","colorSecondary","borderColor","iconSize","width","height","theme","colors","style","rest","previousInitialValue","React","useEffect","styles","mainContainer","backgroundColor","StyleSheet","create","borderWidth","SEED_DATA","name","tag","category","COMPONENT_TYPES","button","layout","props","required","fieldName","defaultValue","valuePropName","label","description"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { withTheme } from \"../theming\";\nimport { colorTypes } from \"@draftbit/types\";\nimport { StyleProp, StyleSheet, ViewStyle } from \"react-native\";\nimport IconButton from \"./IconButton\";\nimport {\n  COMPONENT_TYPES,\n  createIconProp,\n  createBoolProp,\n  createColorProp,\n  createStaticNumberProp,\n  createActionProp,\n  createFieldNameProp,\n  createIconSizeProp,\n} from \"@draftbit/types\";\nimport type { Theme } from \"../styles/DefaultTheme\";\nimport type { IconSlot } from \"../interfaces/Icon\";\nimport { usePrevious } from \"../hooks\";\n\ntype Props = {\n  icon: string;\n  toggled?: boolean;\n  onPress?: (toggled: boolean) => void;\n  initialValue?: boolean;\n  disabled?: boolean;\n  color?: colorTypes;\n  colorSecondary?: colorTypes;\n  borderColor?: colorTypes;\n  iconSize?: number;\n  width?: number;\n  height?: number;\n  style?: StyleProp<ViewStyle>;\n  theme: Theme;\n} & IconSlot;\n\nconst ToggleButton: React.FC<Props> = ({\n  Icon,\n  icon,\n  toggled = false,\n  onPress = () => {},\n  initialValue,\n  disabled = false,\n  color = \"primary\",\n  colorSecondary = \"surface\",\n  borderColor = \"divider\",\n  iconSize = 25,\n  width = 50,\n  height = 50,\n  theme: { colors },\n  style,\n  ...rest\n}) => {\n  const previousInitialValue = usePrevious(initialValue);\n  React.useEffect(() => {\n    if (initialValue !== previousInitialValue) {\n      onPress(initialValue);\n    }\n  }, [initialValue, previousInitialValue, onPress]);\n\n  return (\n    <IconButton\n      Icon={Icon}\n      icon={icon}\n      size={iconSize}\n      color={toggled ? colors[color] : colors[colorSecondary]}\n      onPress={() => onPress(!toggled)}\n      disabled={disabled}\n      style={[\n        styles.mainContainer,\n        {\n          width,\n          height,\n          backgroundColor: toggled ? colors[colorSecondary] : colors[color],\n          borderColor: colors[borderColor],\n        },\n        style,\n      ]}\n      {...rest}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  mainContainer: {\n    borderWidth: 1,\n  },\n});\n\nexport default withTheme(ToggleButton);\n\nexport const SEED_DATA = {\n  name: \"Toggle Button\",\n  tag: \"ToggleButton\",\n  category: COMPONENT_TYPES.button,\n  layout: {},\n  props: {\n    icon: createIconProp({\n      required: true,\n    }),\n    iconSize: createIconSizeProp(),\n    fieldName: createFieldNameProp({\n      defaultValue: false,\n      valuePropName: \"toggled\",\n    }),\n    onPress: createActionProp(),\n    disabled: createBoolProp({\n      label: \"Disabled\",\n      description: \"Whether the button should be disabled\",\n    }),\n    color: createColorProp(),\n    colorSecondary: createColorProp({\n      label: \"Secondary Color\",\n    }),\n    borderColor: createColorProp({\n      label: \"Border Color\",\n    }),\n    width: createStaticNumberProp({\n      label: \"Width\",\n      description: \"Width\",\n      defaultValue: 50,\n    }),\n    height: createStaticNumberProp({\n      label: \"Height\",\n      description: \"Height\",\n      defaultValue: 50,\n    }),\n  },\n};\n"]}