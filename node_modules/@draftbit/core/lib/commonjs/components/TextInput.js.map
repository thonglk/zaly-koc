{"version":3,"sources":["TextInput.tsx"],"names":["TextInput","initialValue","onChangeText","props","previousInitialValue","React","useEffect"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;AAOA,MAAMA,SAA0B,GAAG,CAAC;AAClCC,EAAAA,YADkC;AAElCC,EAAAA,YAFkC;AAGlC,KAAGC;AAH+B,CAAD,KAI7B;AACJ,QAAMC,oBAAoB,GAAG,wBAAYH,YAAZ,CAA7B;;AACAI,iBAAMC,SAAN,CAAgB,MAAM;AACpB,QAAIL,YAAY,KAAKG,oBAArB,EAA2C;AACzCF,MAAAA,YAAY,CAACD,YAAD,CAAZ;AACD;AACF,GAJD,EAIG,CAACA,YAAD,EAAeG,oBAAf,EAAqCF,YAArC,CAJH;;AAMA,sBAAO,6BAAC,sBAAD;AAAiB,IAAA,YAAY,EAAEA;AAA/B,KAAiDC,KAAjD,EAAP;AACD,CAbD;;eAeeH,S","sourcesContent":["import React from \"react\";\nimport { TextInput as NativeTextInput } from \"react-native\";\nimport { usePrevious } from \"../hooks\";\n\ninterface Props {\n  initialValue?: string;\n  onChangeText: (value?: string) => void;\n}\n\nconst TextInput: React.FC<Props> = ({\n  initialValue,\n  onChangeText,\n  ...props\n}) => {\n  const previousInitialValue = usePrevious(initialValue);\n  React.useEffect(() => {\n    if (initialValue !== previousInitialValue) {\n      onChangeText(initialValue);\n    }\n  }, [initialValue, previousInitialValue, onChangeText]);\n\n  return <NativeTextInput onChangeText={onChangeText} {...props} />;\n};\n\nexport default TextInput;\n"]}