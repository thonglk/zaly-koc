"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SEED_DATA = exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _theming = require("../theming");

var _reactNative = require("react-native");

var _IconButton = _interopRequireDefault(require("./IconButton"));

var _types = require("@draftbit/types");

var _hooks = require("../hooks");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const ToggleButton = ({
  Icon,
  icon,
  toggled = false,
  onPress = () => {},
  initialValue,
  disabled = false,
  color = "primary",
  colorSecondary = "surface",
  borderColor = "divider",
  iconSize = 25,
  width = 50,
  height = 50,
  theme: {
    colors
  },
  style,
  ...rest
}) => {
  const previousInitialValue = (0, _hooks.usePrevious)(initialValue);
  React.useEffect(() => {
    if (initialValue !== previousInitialValue) {
      onPress(initialValue);
    }
  }, [initialValue, previousInitialValue, onPress]);
  return /*#__PURE__*/React.createElement(_IconButton.default, _extends({
    Icon: Icon,
    icon: icon,
    size: iconSize,
    color: toggled ? colors[color] : colors[colorSecondary],
    onPress: () => onPress(!toggled),
    disabled: disabled,
    style: [styles.mainContainer, {
      width,
      height,
      backgroundColor: toggled ? colors[colorSecondary] : colors[color],
      borderColor: colors[borderColor]
    }, style]
  }, rest));
};

const styles = _reactNative.StyleSheet.create({
  mainContainer: {
    borderWidth: 1
  }
});

var _default = (0, _theming.withTheme)(ToggleButton);

exports.default = _default;
const SEED_DATA = {
  name: "Toggle Button",
  tag: "ToggleButton",
  category: _types.COMPONENT_TYPES.button,
  layout: {},
  props: {
    icon: (0, _types.createIconProp)({
      required: true
    }),
    iconSize: (0, _types.createIconSizeProp)(),
    fieldName: (0, _types.createFieldNameProp)({
      defaultValue: false,
      valuePropName: "toggled"
    }),
    onPress: (0, _types.createActionProp)(),
    disabled: (0, _types.createBoolProp)({
      label: "Disabled",
      description: "Whether the button should be disabled"
    }),
    color: (0, _types.createColorProp)(),
    colorSecondary: (0, _types.createColorProp)({
      label: "Secondary Color"
    }),
    borderColor: (0, _types.createColorProp)({
      label: "Border Color"
    }),
    width: (0, _types.createStaticNumberProp)({
      label: "Width",
      description: "Width",
      defaultValue: 50
    }),
    height: (0, _types.createStaticNumberProp)({
      label: "Height",
      description: "Height",
      defaultValue: 50
    })
  }
};
exports.SEED_DATA = SEED_DATA;
//# sourceMappingURL=ToggleButton.js.map