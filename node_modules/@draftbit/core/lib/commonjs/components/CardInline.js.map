{"version":3,"sources":["CardInline.tsx"],"names":["CardInline","image","Config","cardImageUrl","title","subtitle","aspectRatio","elevation","style","titleStyle","subtitleStyle","onPress","alignItems","justifyContent","width","height","StyleSheet","flatten","imageStyles","pressed","opacity","uri","styles","overlay","color","create","position","top","bottom","left","right","padding","backgroundColor","SEED_DATA","name","tag","description","category","COMPONENT_TYPES","card","layout","props","group","GROUPS","data","label","formType","FORM_TYPES","propType","PROP_TYPES","ASSET","defaultValue","editable","required","string","STRING","basic","NUMBER"],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport React from \"react\";\nimport {\n  Pressable,\n  View,\n  ImageSourcePropType,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  StyleSheet,\n} from \"react-native\";\nimport { Title, Subtitle } from \"./Typography\";\nimport Image from \"./Image\";\nimport Surface from \"./Surface\";\nimport Config from \"./Config\";\nimport { withTheme } from \"../theming\";\nimport theme from \"../styles/DefaultTheme\";\nimport {\n  GROUPS,\n  COMPONENT_TYPES,\n  FORM_TYPES,\n  PROP_TYPES,\n  createElevationType,\n} from \"@draftbit/types\";\n\ntype Props = {\n  image?: string | ImageSourcePropType;\n  title?: string;\n  subtitle?: string;\n  aspectRatio?: number;\n  elevation?: number;\n  theme: typeof theme;\n  style?: StyleProp<ViewStyle>;\n  titleStyle?: StyleProp<TextStyle>;\n  subtitleStyle?: StyleProp<TextStyle>;\n  onPress: () => void;\n};\n\nconst CardInline: React.FC<Props> = ({\n  image = Config.cardImageUrl,\n  title,\n  subtitle,\n  aspectRatio = 1.5,\n  elevation = 2,\n  style,\n  titleStyle,\n  subtitleStyle,\n  onPress,\n}) => {\n  const { alignItems, justifyContent, width, height } = StyleSheet.flatten(\n    style || {}\n  );\n  const imageStyles = width && height ? { width, height } : { aspectRatio };\n  return (\n    <Surface style={[{ elevation }, style]}>\n      <Pressable\n        disabled={!onPress}\n        onPress={onPress}\n        style={({ pressed }) => {\n          return [\n            {\n              opacity: pressed ? 0.8 : 1,\n            },\n          ];\n        }}\n      >\n        <Image\n          style={imageStyles}\n          source={typeof image === \"string\" ? { uri: image } : image}\n          resizeMode=\"cover\"\n        />\n        <View style={[styles.overlay, { justifyContent, alignItems }]}>\n          {title ? (\n            <Title style={[{ color: \"white\" }, titleStyle]} text={title} />\n          ) : null}\n          {subtitle ? (\n            <Subtitle\n              style={[{ color: \"rgba(255, 255, 255, 0.7)\" }, subtitleStyle]}\n              text={subtitle}\n            />\n          ) : null}\n        </View>\n      </Pressable>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  overlay: {\n    position: \"absolute\",\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    padding: 16,\n    backgroundColor: \"rgba(0, 0, 0, 0.2)\",\n  },\n});\n\nexport default withTheme(CardInline);\n\nexport const SEED_DATA = {\n  name: \"Inline Card\",\n  tag: \"CardInline\",\n  description:\n    \"An elevated card with image and a title and description overlayed, that takes up the full width of its container.\",\n  category: COMPONENT_TYPES.card,\n  layout: {},\n  props: {\n    image: {\n      group: GROUPS.data,\n      label: \"Image\",\n      description: \"Image\",\n      formType: FORM_TYPES.image,\n      propType: PROP_TYPES.ASSET,\n      defaultValue: null,\n      editable: true,\n      required: false,\n    },\n    title: {\n      group: GROUPS.data,\n      label: \"Title\",\n      description: \"Text to display\",\n      formType: FORM_TYPES.string,\n      propType: PROP_TYPES.STRING,\n      defaultValue: \"Beautiful West Coast Villa\",\n      editable: true,\n      required: false,\n    },\n    subtitle: {\n      group: GROUPS.data,\n      label: \"Subtitle\",\n      description: \"Subtitle text\",\n      formType: FORM_TYPES.string,\n      propType: PROP_TYPES.STRING,\n      defaultValue: \"San Diego\",\n      editable: true,\n      required: false,\n    },\n    aspectRatio: {\n      group: GROUPS.basic,\n      label: \"Aspect ratio\",\n      description: \"Aspect ratio of the image\",\n      formType: FORM_TYPES.aspectRatio,\n      propType: PROP_TYPES.NUMBER,\n      defaultValue: 1.5,\n      editable: true,\n      required: false,\n    },\n    elevation: createElevationType(2),\n  },\n};\n"]}