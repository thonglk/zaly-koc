"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SEED_DATA = exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _theming = require("../theming");

var _types = require("@draftbit/types");

var _Config = _interopRequireDefault(require("./Config"));

var _hooks = require("../hooks");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const FieldSearchBarFull = ({
  Icon,
  icon = "search",
  placeholder = "",
  style,
  theme: {
    colors,
    typography
  },
  onChange: changeOverride,
  onSubmit: submitOverride,
  value,
  initialValue
}) => {
  const [focused, setIsFocused] = React.useState(false);

  const onBlur = () => {
    setIsFocused(false);
  };

  const onChange = React.useCallback(text => {
    changeOverride && changeOverride(text);
  }, [changeOverride]);
  const previousInitialValue = (0, _hooks.usePrevious)(initialValue);
  React.useEffect(() => {
    if (initialValue !== previousInitialValue) {
      onChange(initialValue);
    }
  }, [initialValue, previousInitialValue, onChange]);

  const onFocus = () => {
    setIsFocused(true);
  };

  const onSubmit = e => {
    submitOverride && submitOverride(e);
  };

  const {
    lineHeight,
    ...typeStyles
  } = typography.body2; // eslint-disable-line @typescript-eslint/no-unused-vars

  return /*#__PURE__*/React.createElement(_reactNative.View, {
    style: [{
      padding: 16
    }, styles.container, style]
  }, /*#__PURE__*/React.createElement(Icon, {
    name: icon,
    size: _Config.default.fieldSearchBarFullIconSize,
    color: focused ? colors.primary : colors.light
  }), /*#__PURE__*/React.createElement(_reactNative.View, {
    style: {
      marginLeft: 12,
      flex: 1
    }
  }, /*#__PURE__*/React.createElement(_reactNative.TextInput, {
    clearButtonMode: "while-editing",
    placeholder: placeholder,
    value: value,
    onBlur: onBlur,
    onFocus: onFocus,
    onChangeText: onChange,
    onSubmitEditing: onSubmit,
    placeholderTextColor: colors.light,
    style: [{
      color: colors.medium
    }, typeStyles]
  })));
};

const styles = _reactNative.StyleSheet.create({
  container: {
    flexDirection: "row",
    alignItems: "center"
  }
});

var _default = (0, _theming.withTheme)(FieldSearchBarFull);

exports.default = _default;
const SEED_DATA = [{
  name: "Search Bar",
  tag: "FieldSearchBarFull",
  description: "A search bar with accompanying search icon and clear button.",
  category: _types.COMPONENT_TYPES.input,
  preview_image_url: "{CLOUDINARY_URL}/Field_SearchBar_Full.png",
  supports_list_render: false,
  props: {
    icon: {
      group: _types.GROUPS.basic,
      label: "Icon",
      description: "Left icon to display",
      formType: _types.FORM_TYPES.icon,
      propType: _types.PROP_TYPES.ASSET,
      defaultValue: null,
      editable: true,
      required: false
    },
    placeholder: {
      group: _types.GROUPS.basic,
      label: "Placeholder",
      description: "Input placeholder text",
      formType: _types.FORM_TYPES.string,
      propType: _types.PROP_TYPES.STRING,
      defaultValue: "Search for...",
      editable: true,
      required: false
    },
    onSubmit: {
      group: _types.GROUPS.basic,
      label: "Submit action",
      description: "Action to execute on submission",
      editable: true,
      required: false,
      formType: _types.FORM_TYPES.action,
      propType: _types.PROP_TYPES.STRING,
      defaultValue: null
    },
    fieldName: { ..._types.FIELD_NAME,
      defaultValue: "searchBarValue"
    }
  },
  layout: {}
}];
exports.SEED_DATA = SEED_DATA;
//# sourceMappingURL=FieldSearchBarFull.js.map