"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SEED_DATA = exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _theming = require("../../theming");

var _PickerComponent = _interopRequireDefault(require("./PickerComponent"));

var _types = require("@draftbit/types");

var _hooks = require("../../hooks");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function normalizeOptions(options) {
  if (options.length === 0) {
    return [];
  }

  if (typeof options[0] === "string") {
    return options.map(option => ({
      label: option,
      value: option
    }));
  }

  if (options[0].label && options[0].value) {
    return options;
  }

  throw new Error('Picker options must be either an array of strings or array of { "label": string; "value": string; } objects.');
}

const Picker = ({
  options = [],
  placeholder,
  onValueChange: onValueChangeOverride,
  value,
  initialValue,
  ...props
}) => {
  const onValueChange = React.useCallback((itemValue, itemIndex) => {
    if (placeholder && itemIndex === 0) {
      return;
    }

    onValueChangeOverride && onValueChangeOverride(itemValue, itemIndex);
  }, [placeholder, onValueChangeOverride]);
  const normalizedOptions = normalizeOptions(options);
  const previousInitialValue = (0, _hooks.usePrevious)(initialValue);
  React.useEffect(() => {
    if (initialValue !== previousInitialValue) {
      const index = normalizedOptions.findIndex(opt => opt.value === initialValue);

      if (index == null) {
        return;
      }

      onValueChange(initialValue, index);
    }
  }, [initialValue, previousInitialValue, normalizedOptions, onValueChange]);
  const pickerOptions = placeholder ? [{
    value: placeholder,
    label: placeholder
  }, ...normalizedOptions] : normalizedOptions;
  return /*#__PURE__*/React.createElement(_PickerComponent.default, _extends({}, props, {
    selectedValue: value,
    placeholder: placeholder,
    options: pickerOptions,
    onValueChange: onValueChange
  }));
};

var _default = (0, _theming.withTheme)(Picker);

exports.default = _default;
const SEED_DATA_PROPS = {
  label: {
    group: _types.GROUPS.data,
    label: "Label",
    description: "The label to be displayed on the picker",
    formType: _types.FORM_TYPES.string,
    propType: _types.PROP_TYPES.STRING,
    defaultValue: null,
    editable: true,
    required: true
  },
  placeholder: {
    group: _types.GROUPS.basic,
    label: "Placeholder",
    description: "The placeholder text of the picker",
    formType: _types.FORM_TYPES.string,
    propType: _types.PROP_TYPES.STRING,
    defaultValue: "Select an option",
    editable: true,
    required: false
  },
  placeholderTextColor: {
    group: _types.GROUPS.basic,
    label: "Placeholder Text Color",
    description: "The color of the placeholder text.",
    editable: true,
    required: false,
    defaultValue: null,
    formType: _types.FORM_TYPES.color,
    propType: _types.PROP_TYPES.STRING
  },
  assistiveText: {
    group: _types.GROUPS.basic,
    label: "Assistive text",
    description: "Helper text to display below the picker",
    formType: _types.FORM_TYPES.string,
    propType: _types.PROP_TYPES.STRING,
    defaultValue: null,
    editable: true,
    required: false
  },
  options: {
    group: _types.GROUPS.data,
    label: "Options",
    description: "Array of picker options. An array of objects containing a label and value.",
    editable: true,
    required: false,
    formType: _types.FORM_TYPES.array,
    propType: _types.PROP_TYPES.OBJECT,
    options: [],
    defaultValue: null
  },
  disabled: {
    group: _types.GROUPS.basic,
    label: "Disabled",
    description: "Whether the picker should be disabled. Will prevent selection and show a greyed out state.",
    formType: _types.FORM_TYPES.boolean,
    propType: _types.PROP_TYPES.BOOLEAN,
    defaultValue: false,
    editable: true,
    required: false
  },
  error: {
    group: _types.GROUPS.data,
    label: "Error",
    description: "Whether the picker should display the error state",
    formType: _types.FORM_TYPES.boolean,
    propType: _types.PROP_TYPES.BOOLEAN,
    defaultValue: false,
    editable: true,
    required: false
  },
  leftIconName: {
    group: _types.GROUPS.basic,
    label: "Left icon name",
    description: "The icon to display on the left",
    formType: _types.FORM_TYPES.icon,
    propType: _types.PROP_TYPES.ASSET,
    defaultValue: null,
    editable: true,
    required: false
  },
  leftIconMode: {
    group: _types.GROUPS.basic,
    label: "Left icon mode",
    description: "The mode of the icon to display on the left. 'inset' or 'outset'.",
    formType: _types.FORM_TYPES.flatArray,
    propType: _types.PROP_TYPES.STRING,
    defaultValue: "inset",
    options: ["inset", "outset"],
    editable: true,
    required: true
  },
  rightIconName: {
    group: _types.GROUPS.basic,
    label: "Right icon name",
    description: "The icon to display on the right",
    formType: _types.FORM_TYPES.icon,
    propType: _types.PROP_TYPES.ASSET,
    defaultValue: null,
    editable: true,
    required: false
  },
  fieldName: { ..._types.FIELD_NAME,
    defaultValue: "pickerValue",
    handlerPropName: "onValueChange"
  }
};
const SEED_DATA = [{
  name: "Picker",
  tag: "Picker",
  description: "A component used to pick a value from a set of options",
  category: _types.COMPONENT_TYPES.input,
  preview_image_url: "{CLOUDINARY_URL}/Picker.png",
  supports_list_render: false,
  props: { ...SEED_DATA_PROPS,
    type: {
      label: "Appearance",
      description: "Type of Picker",
      formType: _types.FORM_TYPES.flatArray,
      propType: _types.PROP_TYPES.STRING,
      defaultValue: "solid",
      options: ["solid", "underline"],
      editable: true,
      required: true,
      group: _types.GROUPS.basic
    }
  },
  layout: {}
}, {
  name: "Picker - Underline",
  tag: "Picker",
  description: "A picker with an underline",
  category: _types.COMPONENT_TYPES.input,
  preview_image_url: "{CLOUDINARY_URL}/Picker.png",
  supports_list_render: false,
  props: { ...SEED_DATA_PROPS,
    type: {
      label: "Type",
      description: "Type",
      group: _types.GROUPS.uncategorized,
      formType: _types.FORM_TYPES.string,
      propType: _types.PROP_TYPES.STRING,
      defaultValue: "underline",
      editable: false,
      required: false
    }
  },
  layout: {}
}];
exports.SEED_DATA = SEED_DATA;
//# sourceMappingURL=Picker.js.map