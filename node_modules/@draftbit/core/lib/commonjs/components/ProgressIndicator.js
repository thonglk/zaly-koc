"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SEED_DATA = exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _StepIndicator = _interopRequireDefault(require("./StepIndicator"));

var _theming = require("../theming");

var _types = require("@draftbit/types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const ProgressIndicator = ({
  numberOfSteps,
  currentStep,
  currentStepStrokeWidth = 3,
  stepStrokeCurrentColor = "primary",
  stepIndicatorSize,
  currentStepIndicatorSize,
  stepIndicatorCurrentColor,
  stepIndicatorLabelCurrentColor,
  stepIndicatorLabelFontSize = 12,
  stepNumberFinishedColor = "strongInverse",
  stepNumberUnfinishedColor = "primary",
  unfinishedColor = "light",
  finishedColor = "primary",
  theme
}) => {
  const currentPosition = currentStep - 1;
  return /*#__PURE__*/React.createElement(_StepIndicator.default, {
    stepCount: numberOfSteps,
    currentPosition: currentPosition,
    customStyles: {
      stepIndicatorSize,
      currentStepIndicatorSize: currentStepIndicatorSize ? currentStepIndicatorSize : stepIndicatorSize,
      stepStrokeFinishedColor: finishedColor,
      stepStrokeUnFinishedColor: unfinishedColor,
      separatorFinishedColor: finishedColor,
      separatorUnFinishedColor: unfinishedColor,
      stepIndicatorFinishedColor: finishedColor,
      stepIndicatorUnFinishedColor: unfinishedColor,
      currentStepStrokeWidth,
      stepStrokeCurrentColor: stepStrokeCurrentColor || stepIndicatorCurrentColor,
      stepIndicatorLabelUnFinishedColor: stepNumberUnfinishedColor,
      stepIndicatorLabelFinishedColor: stepNumberFinishedColor,
      stepIndicatorCurrentColor: stepIndicatorCurrentColor || unfinishedColor,
      stepIndicatorLabelCurrentColor: stepIndicatorLabelCurrentColor || stepNumberUnfinishedColor,
      stepIndicatorLabelFontSize,
      labelFontFamily: theme.typography.body1.fontFamily
    }
  });
};

var _default = (0, _theming.withTheme)(ProgressIndicator);

exports.default = _default;
const SEED_DATA = {
  name: "Progress Indicator",
  tag: "ProgressIndicator",
  description: "A component used to show current Step in a process",
  category: _types.COMPONENT_TYPES.deprecated,
  preview_image_url: "{CLOUDINARY_URL}/Control_Slider.png",
  supports_list_render: false,
  layout: {},
  props: {
    numberOfSteps: {
      group: _types.GROUPS.data,
      label: "Number of Steps",
      description: "The border radius for the thumb",
      editable: true,
      required: false,
      formType: _types.FORM_TYPES.number,
      propType: _types.PROP_TYPES.NUMBER,
      min: 0,
      max: 10,
      step: 1,
      precision: 0,
      defaultValue: 5
    },
    currentStep: {
      group: _types.GROUPS.data,
      label: "Current Step",
      description: "The step that the user is on",
      editable: true,
      required: false,
      formType: _types.FORM_TYPES.number,
      propType: _types.PROP_TYPES.NUMBER,
      min: 0,
      max: 10,
      step: 1,
      precision: 0,
      defaultValue: 5
    },
    stepIndicatorSize: {
      group: _types.GROUPS.basic,
      label: "Step Size",
      description: "The size of the step circle",
      editable: true,
      required: false,
      formType: _types.FORM_TYPES.number,
      propType: _types.PROP_TYPES.NUMBER,
      min: 10,
      max: 100,
      step: 5,
      precision: 0,
      defaultValue: 25
    },
    stepIndicatorLabelFontSize: {
      group: _types.GROUPS.basic,
      label: "Step Font Size",
      description: "The font size of the step number",
      editable: true,
      required: false,
      formType: _types.FORM_TYPES.number,
      propType: _types.PROP_TYPES.NUMBER,
      min: 6,
      max: 36,
      step: 1,
      precision: 0,
      defaultValue: 15
    },
    currentStepIndicatorLabelFontSize: {
      group: _types.GROUPS.basic,
      label: "Current Step Font Size",
      description: "The font size of the current step number",
      editable: true,
      required: false,
      formType: _types.FORM_TYPES.number,
      propType: _types.PROP_TYPES.NUMBER,
      min: 6,
      max: 36,
      step: 1,
      precision: 0,
      defaultValue: 15
    },
    unfinishedColor: {
      group: _types.GROUPS.basic,
      label: "Unfinished Color",
      description: "The color of the step and divider when the step is either not the current step or not finished",
      editable: true,
      required: false,
      formType: _types.FORM_TYPES.color,
      propType: _types.PROP_TYPES.THEME,
      defaultValue: null
    },
    finishedColor: {
      group: _types.GROUPS.basic,
      label: "Finished Color",
      description: "The color of the step and divider when the step is the current step or finished",
      editable: true,
      required: false,
      formType: _types.FORM_TYPES.color,
      propType: _types.PROP_TYPES.THEME,
      defaultValue: null
    },
    stepNumberUnfinishedColor: {
      group: _types.GROUPS.basic,
      label: "Unfinished Number Color",
      description: "The color of the number within the step when unfinished",
      editable: true,
      required: false,
      formType: _types.FORM_TYPES.color,
      propType: _types.PROP_TYPES.THEME,
      defaultValue: null
    },
    stepNumberFinishedColor: {
      group: _types.GROUPS.basic,
      label: "Finished Number Color",
      description: "The color of the number within the step when finished",
      editable: true,
      required: false,
      formType: _types.FORM_TYPES.color,
      propType: _types.PROP_TYPES.THEME,
      defaultValue: null
    },
    stepIndicatorCurrentColor: {
      group: _types.GROUPS.basic,
      label: "Current Step Color",
      description: "The color of current step circle",
      editable: true,
      required: false,
      formType: _types.FORM_TYPES.color,
      propType: _types.PROP_TYPES.THEME,
      defaultValue: null
    },
    stepIndicatorLabelCurrentColor: {
      group: _types.GROUPS.basic,
      label: "Current Step Number Color",
      description: "The color of current number within the step circle",
      editable: true,
      required: false,
      formType: _types.FORM_TYPES.color,
      propType: _types.PROP_TYPES.THEME,
      defaultValue: null
    },
    stepStrokeCurrentColor: {
      group: _types.GROUPS.basic,
      label: "Current Step Border Color",
      description: "The color of current border color of the step",
      editable: true,
      required: false,
      formType: _types.FORM_TYPES.color,
      propType: _types.PROP_TYPES.THEME,
      defaultValue: null
    },
    currentStepStrokeWidth: {
      group: _types.GROUPS.basic,
      label: "Current Step Border Width",
      description: "The width of the border for the current step",
      editable: true,
      required: false,
      formType: _types.FORM_TYPES.number,
      propType: _types.PROP_TYPES.NUMBER,
      min: 1,
      max: 20,
      step: 1,
      precision: 0,
      defaultValue: 0
    },
    currentStepIndicatorSize: {
      group: _types.GROUPS.basic,
      label: "Current Step Size",
      description: "The size of the current step circle",
      editable: true,
      required: false,
      formType: _types.FORM_TYPES.number,
      propType: _types.PROP_TYPES.NUMBER,
      min: 10,
      max: 100,
      step: 5,
      precision: 0,
      defaultValue: null
    }
  }
};
exports.SEED_DATA = SEED_DATA;
//# sourceMappingURL=ProgressIndicator.js.map