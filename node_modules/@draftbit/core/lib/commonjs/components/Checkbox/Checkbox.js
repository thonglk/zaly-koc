"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SEED_DATA = exports.default = exports.CheckboxStatus = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _types = require("@draftbit/types");

var _theming = require("../../theming");

var _Touchable = _interopRequireDefault(require("../Touchable"));

var _hooks = require("../../hooks");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

let CheckboxStatus;
exports.CheckboxStatus = CheckboxStatus;

(function (CheckboxStatus) {
  CheckboxStatus["Checked"] = "checked";
  CheckboxStatus["Unchecked"] = "unchecked";
  CheckboxStatus["Indeterminate"] = "indeterminate";
})(CheckboxStatus || (exports.CheckboxStatus = CheckboxStatus = {}));

const Checkbox = ({
  Icon,
  status = CheckboxStatus.Unchecked,
  disabled = false,
  onPress = () => {},
  color,
  uncheckedColor,
  indeterminateColor,
  initialValue,
  checkedIcon = "MaterialCommunityIcons/checkbox-marked",
  uncheckedIcon = "MaterialCommunityIcons/checkbox-blank-outline",
  indeterminateIcon = "AntDesign/minussquareo",
  size = 24,
  style,
  ...rest
}) => {
  const previousInitialValue = (0, _hooks.usePrevious)(initialValue);
  React.useEffect(() => {
    if (initialValue !== previousInitialValue) {
      onPress(initialValue);
    }
  }, [initialValue, previousInitialValue, onPress]);
  const {
    colors
  } = (0, _theming.useTheme)();
  const colorsMap = {
    [CheckboxStatus.Checked]: color || colors.primary,
    [CheckboxStatus.Unchecked]: uncheckedColor || colors.primary,
    [CheckboxStatus.Indeterminate]: indeterminateColor || colors.light
  };
  const iconsMap = {
    [CheckboxStatus.Checked]: checkedIcon,
    [CheckboxStatus.Unchecked]: uncheckedIcon,
    [CheckboxStatus.Indeterminate]: indeterminateIcon
  };
  const checkboxColor = colorsMap[status];
  return /*#__PURE__*/React.createElement(_Touchable.default, _extends({}, rest, {
    onPress: () => onPress(status === "unchecked" ? true : false),
    disabled: disabled,
    accessibilityState: {
      disabled
    },
    accessibilityRole: "button",
    accessibilityLiveRegion: "polite",
    style: [styles.container, style, {
      width: size,
      height: size
    }]
  }), /*#__PURE__*/React.createElement(Icon, {
    style: styles.icon,
    name: iconsMap[status],
    size: size,
    color: checkboxColor
  }), /*#__PURE__*/React.createElement(_reactNative.View, {
    style: [_reactNative.StyleSheet.absoluteFill, styles.fillContainer]
  }, /*#__PURE__*/React.createElement(_reactNative.View, {
    style: [styles.fill, {
      opacity: disabled ? 0.5 : 1
    }, {
      borderColor: checkboxColor
    }]
  })));
};

const styles = _reactNative.StyleSheet.create({
  container: {
    borderRadius: 18
  },
  fillContainer: {
    alignItems: "center",
    justifyContent: "center"
  },
  icon: {
    alignSelf: "center"
  },
  fill: {
    borderRadius: 5,
    width: 30,
    height: 30,
    alignSelf: "center"
  }
});

var _default = Checkbox;
exports.default = _default;
const SEED_DATA = {
  name: "Checkbox",
  tag: "Checkbox",
  category: _types.COMPONENT_TYPES.input,
  props: {
    fieldName: (0, _types.createFieldNameProp)({
      defaultValue: "checkboxValue",
      valuePropName: "status",
      handlerPropName: "onPress"
    }),
    color: (0, _types.createColorProp)({
      group: _types.GROUPS.basic,
      label: "Color",
      description: "Color for the button (used when the checkbox is checked)",
      defaultValue: null
    }),
    uncheckedColor: (0, _types.createColorProp)({
      group: _types.GROUPS.basic,
      label: "Unselected Color",
      description: "Color for the button when the checkbox is unchecked",
      defaultValue: null
    }),
    indeterminateColor: (0, _types.createColorProp)({
      group: _types.GROUPS.basic,
      label: "Indeterminate Color",
      description: "Color for the button when the checkbox is indeterminate",
      defaultValue: null
    }),
    disabled: (0, _types.createBoolProp)({
      label: "Disabled",
      description: "Whether the checkbox is disabled"
    }),
    size: (0, _types.createStaticNumberProp)({
      label: "Size",
      description: "Specifies the size of the icon",
      defaultValue: null
    }),
    checkedIcon: (0, _types.createIconProp)({
      label: "Checked Icon",
      description: 'Icon to show when the checkbox status is "checked"',
      defaultValue: null
    }),
    uncheckedIcon: (0, _types.createIconProp)({
      label: "Unchecked Icon",
      description: 'Icon to show when the checkbox status is "unchecked"',
      defaultValue: null
    }),
    indeterminateIcon: (0, _types.createIconProp)({
      label: "Indeterminate Icon",
      description: 'Icon to show when the checkbox status is "indeterminate"',
      defaultValue: null
    })
  }
};
exports.SEED_DATA = SEED_DATA;
//# sourceMappingURL=Checkbox.js.map