{"version":3,"sources":["CheckboxGroup.tsx"],"names":["Provider","checkboxGroupContext","CheckboxGroup","direction","Direction","Vertical","values","onValueChange","style","children","rest","_containerStyle","flexDirection","Horizontal","overflow","push","alignItems","minHeight","SEED_DATA","name","tag","category","COMPONENT_TYPES","deprecated","layout","props","group","GROUPS","data","formType","FORM_TYPES","flatArray","propType","PROP_TYPES","ARRAY","label","description","required","defaultValue","fieldName","handlerPropName","valuePropName"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAUA;;;;;;;;AAWA,MAAM;AAAEA,EAAAA;AAAF,IAAeC,6BAArB;;AAEA,MAAMC,aAA2C,GAAG,CAAC;AACnDC,EAAAA,SAAS,GAAGC,mBAAUC,QAD6B;AAEnDC,EAAAA,MAFmD;AAGnDC,EAAAA,aAAa,GAAG,MAAM,CAAE,CAH2B;AAInDC,EAAAA,KAJmD;AAKnDC,EAAAA,QALmD;AAMnD,KAAGC;AANgD,CAAD,KAO9C;AACJ,QAAMC,eAAqC,GAAG,CAC5C;AACEC,IAAAA,aAAa,EAAET,SAAS,KAAKC,mBAAUS,UAAxB,GAAqC,KAArC,GAA6C,QAD9D;AAEEC,IAAAA,QAAQ,EAAE;AAFZ,GAD4C,CAA9C;;AAOA,MAAIX,SAAS,KAAKC,mBAAUC,QAA5B,EAAsC;AACpCM,IAAAA,eAAe,CAACI,IAAhB,CAAqB;AACnBC,MAAAA,UAAU,EAAE;AADO,KAArB;AAGD;;AAED,sBACE,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAE,CAAC;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAD,EAAoBT,KAApB;AAAb,KAA6CE,IAA7C,gBACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAE;AAAEJ,MAAAA,MAAF;AAAUC,MAAAA,aAAV;AAAyBJ,MAAAA;AAAzB;AAAjB,kBACE,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAEQ;AAAb,KAA+BF,QAA/B,CADF,CADF,CADF;AAOD,CA5BD;;eA8BeP,a;;AAER,MAAMgB,SAAS,GAAG;AACvBC,EAAAA,IAAI,EAAE,gBADiB;AAEvBC,EAAAA,GAAG,EAAE,eAFkB;AAGvBC,EAAAA,QAAQ,EAAEC,uBAAgBC,UAHH;AAIvBC,EAAAA,MAAM,EAAE,EAJe;AAKvBC,EAAAA,KAAK,EAAE;AACLtB,IAAAA,SAAS,EAAE,iCADN;AAELG,IAAAA,MAAM,EAAE,2BAAe;AACrBoB,MAAAA,KAAK,EAAEC,cAAOC,IADO;AAErBC,MAAAA,QAAQ,EAAEC,kBAAWC,SAFA;AAGrBC,MAAAA,QAAQ,EAAEC,kBAAWC,KAHA;AAIrBC,MAAAA,KAAK,EAAE,QAJc;AAKrBC,MAAAA,WAAW,EAAE,iDALQ;AAMrBC,MAAAA,QAAQ,EAAE,IANW;AAOrBC,MAAAA,YAAY,EAAE;AAPO,KAAf,CAFH;AAWLC,IAAAA,SAAS,EAAE,gCAAoB;AAC7BD,MAAAA,YAAY,EAAE,oBADe;AAE7BE,MAAAA,eAAe,EAAE,eAFY;AAG7BC,MAAAA,aAAa,EAAE;AAHc,KAApB;AAXN;AALgB,CAAlB","sourcesContent":["import * as React from \"react\";\nimport { View, StyleProp, ViewStyle } from \"react-native\";\nimport {\n  GROUPS,\n  COMPONENT_TYPES,\n  FORM_TYPES,\n  createTextProp,\n  PROP_TYPES,\n  createFieldNameProp,\n  createDirectionProp,\n} from \"@draftbit/types\";\nimport type { Theme } from \"../../styles/DefaultTheme\";\nimport { checkboxGroupContext, Direction } from \"./context\";\n\nexport interface CheckboxGroupProps {\n  direction?: Direction;\n  style?: StyleProp<ViewStyle>;\n  values: string[];\n  onValueChange: (value: string, selected: boolean) => void;\n  theme: Theme;\n  children: React.ReactNode;\n}\n\nconst { Provider } = checkboxGroupContext;\n\nconst CheckboxGroup: React.FC<CheckboxGroupProps> = ({\n  direction = Direction.Vertical,\n  values,\n  onValueChange = () => {},\n  style,\n  children,\n  ...rest\n}) => {\n  const _containerStyle: StyleProp<ViewStyle> = [\n    {\n      flexDirection: direction === Direction.Horizontal ? \"row\" : \"column\",\n      overflow: \"hidden\",\n    },\n  ];\n\n  if (direction !== Direction.Vertical) {\n    _containerStyle.push({\n      alignItems: \"center\",\n    });\n  }\n\n  return (\n    <View style={[{ minHeight: 40 }, style]} {...rest}>\n      <Provider value={{ values, onValueChange, direction }}>\n        <View style={_containerStyle}>{children}</View>\n      </Provider>\n    </View>\n  );\n};\n\nexport default CheckboxGroup;\n\nexport const SEED_DATA = {\n  name: \"Checkbox Group\",\n  tag: \"CheckboxGroup\",\n  category: COMPONENT_TYPES.deprecated,\n  layout: {},\n  props: {\n    direction: createDirectionProp(),\n    values: createTextProp({\n      group: GROUPS.data,\n      formType: FORM_TYPES.flatArray,\n      propType: PROP_TYPES.ARRAY,\n      label: \"Values\",\n      description: \"Currently selected values of the checkbox group\",\n      required: true,\n      defaultValue: null,\n    }),\n    fieldName: createFieldNameProp({\n      defaultValue: \"checkboxGroupValue\",\n      handlerPropName: \"onValueChange\",\n      valuePropName: \"checkboxGroupValue\",\n    }),\n  },\n};\n"]}