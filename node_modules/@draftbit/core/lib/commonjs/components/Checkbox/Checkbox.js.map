{"version":3,"sources":["Checkbox.tsx"],"names":["CheckboxStatus","Checkbox","Icon","status","Unchecked","disabled","onPress","color","uncheckedColor","indeterminateColor","initialValue","checkedIcon","uncheckedIcon","indeterminateIcon","size","style","rest","previousInitialValue","React","useEffect","colors","colorsMap","Checked","primary","Indeterminate","light","iconsMap","checkboxColor","styles","container","width","height","icon","StyleSheet","absoluteFill","fillContainer","fill","opacity","borderColor","create","borderRadius","alignItems","justifyContent","alignSelf","SEED_DATA","name","tag","category","COMPONENT_TYPES","input","props","fieldName","defaultValue","valuePropName","handlerPropName","group","GROUPS","basic","label","description"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {\n  View,\n  StyleSheet,\n  TouchableHighlightProps,\n  StyleProp,\n  ViewStyle,\n} from \"react-native\";\nimport {\n  COMPONENT_TYPES,\n  createBoolProp,\n  createIconProp,\n  createStaticNumberProp,\n  createColorProp,\n  createFieldNameProp,\n  GROUPS,\n} from \"@draftbit/types\";\nimport { useTheme } from \"../../theming\";\nimport type { IconSlot } from \"../../interfaces/Icon\";\n\nimport Touchable from \"../Touchable\";\nimport { usePrevious } from \"../../hooks\";\n\nexport enum CheckboxStatus {\n  Checked = \"checked\",\n  Unchecked = \"unchecked\",\n  Indeterminate = \"indeterminate\",\n}\n\nexport interface CheckboxProps {\n  status?: CheckboxStatus;\n  disabled?: boolean;\n  onPress?: (checked: boolean) => void;\n  color?: string;\n  uncheckedColor?: string;\n  indeterminateColor?: string;\n  checkedIcon?: string;\n  uncheckedIcon?: string;\n  indeterminateIcon?: string;\n  initialValue?: boolean;\n  size?: number;\n  style?: StyleProp<ViewStyle>;\n}\n\nconst Checkbox: React.FC<CheckboxProps & TouchableHighlightProps & IconSlot> =\n  ({\n    Icon,\n    status = CheckboxStatus.Unchecked,\n    disabled = false,\n    onPress = () => {},\n    color,\n    uncheckedColor,\n    indeterminateColor,\n    initialValue,\n    checkedIcon = \"MaterialCommunityIcons/checkbox-marked\",\n    uncheckedIcon = \"MaterialCommunityIcons/checkbox-blank-outline\",\n    indeterminateIcon = \"AntDesign/minussquareo\",\n    size = 24,\n    style,\n    ...rest\n  }) => {\n    const previousInitialValue = usePrevious(initialValue);\n    React.useEffect(() => {\n      if (initialValue !== previousInitialValue) {\n        onPress(initialValue);\n      }\n    }, [initialValue, previousInitialValue, onPress]);\n    const { colors } = useTheme();\n\n    const colorsMap = {\n      [CheckboxStatus.Checked]: color || colors.primary,\n      [CheckboxStatus.Unchecked]: uncheckedColor || colors.primary,\n      [CheckboxStatus.Indeterminate]: indeterminateColor || colors.light,\n    };\n\n    const iconsMap = {\n      [CheckboxStatus.Checked]: checkedIcon,\n      [CheckboxStatus.Unchecked]: uncheckedIcon,\n      [CheckboxStatus.Indeterminate]: indeterminateIcon,\n    };\n\n    const checkboxColor = colorsMap[status];\n\n    return (\n      <Touchable\n        {...rest}\n        onPress={() => onPress(status === \"unchecked\" ? true : false)}\n        disabled={disabled}\n        accessibilityState={{ disabled }}\n        accessibilityRole=\"button\"\n        accessibilityLiveRegion=\"polite\"\n        style={[styles.container, style, { width: size, height: size }]}\n      >\n        <Icon\n          style={styles.icon}\n          name={iconsMap[status]}\n          size={size}\n          color={checkboxColor}\n        />\n        <View style={[StyleSheet.absoluteFill, styles.fillContainer]}>\n          <View\n            style={[\n              styles.fill,\n              { opacity: disabled ? 0.5 : 1 },\n              { borderColor: checkboxColor },\n            ]}\n          />\n        </View>\n      </Touchable>\n    );\n  };\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n  },\n  fillContainer: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  icon: {\n    alignSelf: \"center\",\n  },\n  fill: {\n    borderRadius: 5,\n    width: 30,\n    height: 30,\n    alignSelf: \"center\",\n  },\n});\n\nexport default Checkbox;\n\nexport const SEED_DATA = {\n  name: \"Checkbox\",\n  tag: \"Checkbox\",\n  category: COMPONENT_TYPES.input,\n  props: {\n    fieldName: createFieldNameProp({\n      defaultValue: \"checkboxValue\",\n      valuePropName: \"status\",\n      handlerPropName: \"onPress\",\n    }),\n    color: createColorProp({\n      group: GROUPS.basic,\n      label: \"Color\",\n      description: \"Color for the button (used when the checkbox is checked)\",\n      defaultValue: null,\n    }),\n    uncheckedColor: createColorProp({\n      group: GROUPS.basic,\n      label: \"Unselected Color\",\n      description: \"Color for the button when the checkbox is unchecked\",\n      defaultValue: null,\n    }),\n    indeterminateColor: createColorProp({\n      group: GROUPS.basic,\n      label: \"Indeterminate Color\",\n      description: \"Color for the button when the checkbox is indeterminate\",\n      defaultValue: null,\n    }),\n    disabled: createBoolProp({\n      label: \"Disabled\",\n      description: \"Whether the checkbox is disabled\",\n    }),\n    size: createStaticNumberProp({\n      label: \"Size\",\n      description: \"Specifies the size of the icon\",\n      defaultValue: null,\n    }),\n    checkedIcon: createIconProp({\n      label: \"Checked Icon\",\n      description: 'Icon to show when the checkbox status is \"checked\"',\n      defaultValue: null,\n    }),\n    uncheckedIcon: createIconProp({\n      label: \"Unchecked Icon\",\n      description: 'Icon to show when the checkbox status is \"unchecked\"',\n      defaultValue: null,\n    }),\n    indeterminateIcon: createIconProp({\n      label: \"Indeterminate Icon\",\n      description: 'Icon to show when the checkbox status is \"indeterminate\"',\n      defaultValue: null,\n    }),\n  },\n};\n"]}