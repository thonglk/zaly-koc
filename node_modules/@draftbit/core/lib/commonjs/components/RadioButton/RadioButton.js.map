{"version":3,"sources":["RadioButton.tsx"],"names":["RadioButton","Icon","disabled","color","value","selected","unselectedColor","onPress","size","Config","radioButtonSize","selectedIcon","unselectedIcon","style","rest","contextValue","onValueChange","handlePress","isSelected","SEED_DATA","name","tag","category","COMPONENT_TYPES","input","props","label","description","defaultValue","required","group","GROUPS","basic","min","max","step","precision"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { StyleProp, ViewStyle } from \"react-native\";\n\nimport Config from \"../Config\";\nimport IconButton from \"../IconButton\";\nimport { useRadioButtonGroupContext } from \"./context\";\n\nimport {\n  GROUPS,\n  COMPONENT_TYPES,\n  createBoolProp,\n  createColorProp,\n  createNumberProp,\n  createIconProp,\n  createTextProp,\n} from \"@draftbit/types\";\nimport type { IconSlot } from \"../../interfaces/Icon\";\n\nexport type RadioButtonProps = {\n  selected?: boolean;\n  disabled?: boolean;\n  color?: string;\n  value?: string;\n  unselectedColor?: string;\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  size?: number;\n  selectedIcon?: string;\n  unselectedIcon?: string;\n} & IconSlot;\n\nconst RadioButton: React.FC<RadioButtonProps> = ({\n  Icon,\n  disabled = false,\n  color,\n  value,\n  selected,\n  unselectedColor,\n  onPress = () => {},\n  size = Config.radioButtonSize,\n  selectedIcon = \"MaterialIcons/radio-button-checked\",\n  unselectedIcon = \"MaterialIcons/radio-button-unchecked\",\n  style,\n  ...rest\n}) => {\n  const { value: contextValue, onValueChange } = useRadioButtonGroupContext();\n\n  const handlePress = () => {\n    onPress && onPress();\n\n    if (onValueChange && value) {\n      onValueChange(value);\n    }\n  };\n\n  const isSelected =\n    selected || (contextValue != null && contextValue === value);\n\n  return (\n    <IconButton\n      Icon={Icon}\n      icon={isSelected ? selectedIcon : unselectedIcon}\n      color={isSelected ? color : unselectedColor}\n      disabled={disabled}\n      onPress={handlePress}\n      size={size}\n      style={style}\n      {...rest}\n    />\n  );\n};\n\nexport default RadioButton;\n\nexport const SEED_DATA = {\n  name: \"Radio Button\",\n  tag: \"RadioButton\",\n  category: COMPONENT_TYPES.input,\n  props: {\n    value: createTextProp({\n      label: \"Value\",\n      description: \"Value of the radio button\",\n      defaultValue: null,\n      required: true,\n    }),\n    color: createColorProp({\n      group: GROUPS.basic,\n      description: \"Color for the button\",\n      defaultValue: \"primary\",\n    }),\n    unselectedColor: createColorProp({\n      group: GROUPS.basic,\n      label: \"Unselected Color\",\n      description: \"Unselected Color for the button\",\n      defaultValue: \"primary\",\n    }),\n    disabled: createBoolProp({\n      label: \"Disabled\",\n      description: \"Whether radio button is disabled\",\n    }),\n    size: createNumberProp({\n      group: GROUPS.basic,\n      label: \"Size\",\n      description: \"Specifies the size of the button\",\n      defaultValue: 24,\n      min: 16,\n      max: 128,\n      step: 1,\n      precision: 0,\n    }),\n    selectedIcon: createIconProp({\n      label: \"Selected Icon\",\n      description: \"Icon to show when the radio button is selected\",\n      defaultValue: \"MaterialIcons/radio-button-checked\",\n    }),\n    unselectedIcon: createIconProp({\n      label: \"Unselected Icon\",\n      description: \"Icon to show when the radio button is unselected\",\n      defaultValue: \"MaterialIcons/radio-button-unchecked\",\n    }),\n  },\n};\n"]}