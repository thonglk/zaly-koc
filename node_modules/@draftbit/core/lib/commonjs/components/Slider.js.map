{"version":3,"sources":["Slider.tsx"],"names":["maybeParseValue","value","undefined","maybe","Slider","Icon","leftIcon","rightIcon","leftIconColor","rightIconColor","initialValue","minimumTrackTintColor","maximumTrackTintColor","thumbTintColor","minimumValue","maximumValue","tapToSeek","step","onValueChange","style","theme","rest","previousInitialValue","React","useEffect","minTrackColor","colors","primary","maxTrackColor","light","thumbColor","leftIconThemeColor","rightIconThemeColor","parsedValue","styles","container","slider","StyleSheet","create","height","flexDirection","alignItems","marginLeft","marginRight","flex","marginHorizontal","SEED_DATA","name","tag","description","category","COMPONENT_TYPES","input","layout","props","fieldName","defaultValue","handlerPropName","valuePropName","group","GROUPS","basic","label","min","max","precision"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { View, StyleSheet, StyleProp, ViewStyle } from \"react-native\";\nimport NativeSlider from \"@react-native-community/slider\";\nimport isNumber from \"lodash.isnumber\";\nimport toNumber from \"lodash.tonumber\";\n\nimport {\n  COMPONENT_TYPES,\n  GROUPS,\n  createNumberProp,\n  createColorProp,\n  createFieldNameProp,\n  createIconProp,\n} from \"@draftbit/types\";\nimport { withTheme } from \"../theming\";\nimport type { Theme } from \"../styles/DefaultTheme\";\nimport type { IconSlot } from \"../interfaces/Icon\";\nimport { usePrevious } from \"../hooks\";\n\nexport type Props = {\n  style?: StyleProp<ViewStyle>;\n  value?: number;\n  initialValue?: number;\n  minimumTrackTintColor: string;\n  maximumTrackTintColor: string;\n  leftIcon?: string;\n  rightIcon?: string;\n  leftIconColor?: string;\n  rightIconColor?: string;\n  thumbTintColor?: string;\n  tapToSeek?: boolean;\n  minimumValue: number;\n  maximumValue: number;\n  step: number;\n  onValueChange?: (value: number) => void;\n  theme: Theme;\n} & IconSlot;\n\nfunction maybeParseValue(value: any) {\n  if (value === undefined) {\n    return undefined;\n  }\n\n  if (isNumber(value)) {\n    return value;\n  }\n\n  try {\n    const maybe = toNumber(value);\n    if (isNumber(maybe)) {\n      return maybe;\n    }\n  } catch {\n    return undefined;\n  }\n\n  return undefined;\n}\n\nfunction Slider({\n  Icon,\n  leftIcon,\n  rightIcon,\n  leftIconColor,\n  rightIconColor,\n  value,\n  initialValue,\n  minimumTrackTintColor,\n  maximumTrackTintColor,\n  thumbTintColor,\n  minimumValue = 0,\n  maximumValue = 100,\n  tapToSeek,\n  step = 1,\n  onValueChange = () => {},\n  style,\n  theme,\n  ...rest\n}: Props) {\n  const previousInitialValue = usePrevious(initialValue);\n  React.useEffect(() => {\n    if (initialValue !== previousInitialValue) {\n      onValueChange(initialValue);\n    }\n  }, [initialValue, previousInitialValue, onValueChange]);\n\n  const minTrackColor = minimumTrackTintColor || theme.colors.primary;\n  const maxTrackColor = maximumTrackTintColor || theme.colors.light;\n  const thumbColor = thumbTintColor || theme.colors.primary;\n\n  const leftIconThemeColor = leftIconColor || theme.colors.light;\n  const rightIconThemeColor = rightIconColor || theme.colors.light;\n\n  const parsedValue = maybeParseValue(value);\n\n  return (\n    <View style={[styles.container, style]} {...rest}>\n      {leftIcon ? (\n        <Icon color={leftIconThemeColor} name={leftIcon} size={24} />\n      ) : null}\n      <NativeSlider\n        value={parsedValue}\n        step={step}\n        minimumValue={minimumValue}\n        maximumValue={maximumValue}\n        tapToSeek={tapToSeek}\n        minimumTrackTintColor={minTrackColor}\n        maximumTrackTintColor={maxTrackColor}\n        thumbTintColor={thumbColor}\n        onSlidingComplete={onValueChange}\n        style={styles.slider}\n      />\n      {rightIcon ? (\n        <Icon color={rightIconThemeColor} name={rightIcon} size={24} />\n      ) : null}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 40,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    marginLeft: 12,\n    marginRight: 12,\n  },\n  slider: {\n    flex: 1,\n    marginHorizontal: 12,\n  },\n});\n\nexport default withTheme(Slider);\n\nexport const SEED_DATA = {\n  name: \"Slider\",\n  tag: \"Slider\",\n  description: \"A component used to set a value in a range\",\n  category: COMPONENT_TYPES.input,\n  layout: {},\n  props: {\n    fieldName: createFieldNameProp({\n      defaultValue: \"sliderValue\",\n      handlerPropName: \"onValueChange\",\n      valuePropName: \"value\",\n    }),\n    minimumValue: createNumberProp({\n      group: GROUPS.basic,\n      label: \"Min Value\",\n      min: 0,\n      max: 1000,\n    }),\n    maximumValue: createNumberProp({\n      group: GROUPS.basic,\n      label: \"Max Value\",\n      min: 1,\n      max: 10000,\n    }),\n    step: createNumberProp({\n      group: GROUPS.basic,\n      label: \"Step\",\n      min: 0,\n      max: 100,\n      step: 0.01,\n      precision: 2,\n    }),\n    leftIcon: createIconProp({\n      label: \"Left Icon\",\n      defaultValue: null,\n    }),\n    rightIcon: createIconProp({\n      label: \"Right Icon\",\n      defaultValue: null,\n    }),\n    minimumTrackTintColor: createColorProp({\n      label: \"Min Track Color\",\n      defaultValue: null,\n    }),\n    maximumTrackTintColor: createColorProp({\n      label: \"Max Track Color\",\n      defaultValue: null,\n    }),\n    thumbTintColor: createColorProp({\n      label: \"Thumb Color\",\n      defaultValue: null,\n    }),\n  },\n};\n"]}