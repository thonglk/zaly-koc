{"version":3,"sources":["Row.tsx"],"names":["Row","titleTypeStyle","titleColor","subtitleTypeStyle","subtitleColor","title","subtitle","multilineSubtitle","image","right","style","styles","container","padding","leftContainer","uri","marginRight","width","Config","rowMultiLineImageSize","rowSingleLineImageSize","height","textContainer","color","marginTop","undefined","StyleSheet","create","flexDirection","flex","justifyContent","alignItems"],"mappings":";;;;;;;AAAA;;AACA;;AAUA;;AACA;;;;;;;;AAiBA,MAAMA,GAAoB,GAAG,CAAC;AAC5BC,EAAAA,cAD4B;AAE5BC,EAAAA,UAF4B;AAG5BC,EAAAA,iBAH4B;AAI5BC,EAAAA,aAJ4B;AAK5BC,EAAAA,KAL4B;AAM5BC,EAAAA,QAN4B;AAO5BC,EAAAA,iBAP4B;AAQ5BC,EAAAA,KAR4B;AAS5BC,EAAAA,KAT4B;AAU5BC,EAAAA;AAV4B,CAAD,KAWvB;AACJ,sBACE,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAE,CAACC,MAAM,CAACC,SAAR,EAAmB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAnB,EAAoCH,KAApC;AAAb,kBACE,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACG;AAApB,KACGN,KAAK,iBACJ,oBAAC,kBAAD;AACE,IAAA,MAAM,EAAE,OAAOA,KAAP,KAAiB,QAAjB,GAA4B;AAAEO,MAAAA,GAAG,EAAEP;AAAP,KAA5B,GAA6CA,KADvD;AAEE,IAAA,KAAK,EAAE;AACLQ,MAAAA,WAAW,EAAE,EADR;AAELC,MAAAA,KAAK,EAAEX,QAAQ,GACXY,gBAAOC,qBADI,GAEXD,gBAAOE,sBAJN;AAKLC,MAAAA,MAAM,EAAEf,QAAQ,GACZY,gBAAOC,qBADK,GAEZD,gBAAOE;AAPN;AAFT,IAFJ,eAeE,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAET,MAAM,CAACW;AAApB,kBACE,oBAAC,iBAAD;AACE,IAAA,KAAK,EAAE,CACLrB,cADK,EAEL;AACEsB,MAAAA,KAAK,EAAErB;AADT,KAFK,CADT;AAOE,IAAA,aAAa,EAAE;AAPjB,KASGG,KATH,CADF,EAYGC,QAAQ,gBACP,oBAAC,iBAAD;AACE,IAAA,KAAK,EAAE,CACLH,iBADK,EAEL;AACEoB,MAAAA,KAAK,EAAEnB,aADT;AAEEoB,MAAAA,SAAS,EAAE;AAFb,KAFK,CADT;AAQE,IAAA,aAAa,EAAEjB,iBAAiB,GAAGkB,SAAH,GAAe;AARjD,KAUGnB,QAVH,CADO,GAaL,IAzBN,CAfF,CADF,EA4CGG,KAAK,IAAIA,KAAK,EA5CjB,CADF;AAgDD,CA5DD;;AA8DA,MAAME,MAAM,GAAGe,wBAAWC,MAAX,CAAkB;AAC/Bb,EAAAA,aAAa,EAAE;AACbc,IAAAA,aAAa,EAAE,KADF;AAEbC,IAAAA,IAAI,EAAE;AAFO,GADgB;AAK/BjB,EAAAA,SAAS,EAAE;AACTgB,IAAAA,aAAa,EAAE,KADN;AAETE,IAAAA,cAAc,EAAE,eAFP;AAGTC,IAAAA,UAAU,EAAE;AAHH,GALoB;AAU/BT,EAAAA,aAAa,EAAE;AACbO,IAAAA,IAAI,EAAE,CADO;AAEbC,IAAAA,cAAc,EAAE;AAFH;AAVgB,CAAlB,CAAf;;eAgBe,wBAAU9B,GAAV,C","sourcesContent":["import * as React from \"react\";\nimport {\n  View,\n  Text,\n  Image,\n  ImageSourcePropType,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  ViewStyle,\n} from \"react-native\";\nimport { withTheme } from \"../theming\";\nimport Config from \"./Config\";\nimport theme from \"../styles/DefaultTheme\";\n\ntype Props = {\n  titleTypeStyle?: StyleProp<TextStyle>;\n  titleColor?: string;\n  subtitleTypeStyle?: StyleProp<TextStyle>;\n  subtitleColor?: string;\n  title?: string;\n  subtitle?: string;\n  multilineSubtitle?: boolean;\n  image?: string | ImageSourcePropType;\n  right?: () => React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  theme: typeof theme;\n};\n\nconst Row: React.FC<Props> = ({\n  titleTypeStyle,\n  titleColor,\n  subtitleTypeStyle,\n  subtitleColor,\n  title,\n  subtitle,\n  multilineSubtitle,\n  image,\n  right,\n  style,\n}) => {\n  return (\n    <View style={[styles.container, { padding: 16 }, style]}>\n      <View style={styles.leftContainer}>\n        {image && (\n          <Image\n            source={typeof image === \"string\" ? { uri: image } : image}\n            style={{\n              marginRight: 12,\n              width: subtitle\n                ? Config.rowMultiLineImageSize\n                : Config.rowSingleLineImageSize,\n              height: subtitle\n                ? Config.rowMultiLineImageSize\n                : Config.rowSingleLineImageSize,\n            }}\n          />\n        )}\n        <View style={styles.textContainer}>\n          <Text\n            style={[\n              titleTypeStyle,\n              {\n                color: titleColor,\n              },\n            ]}\n            numberOfLines={1}\n          >\n            {title}\n          </Text>\n          {subtitle ? (\n            <Text\n              style={[\n                subtitleTypeStyle,\n                {\n                  color: subtitleColor,\n                  marginTop: 4,\n                },\n              ]}\n              numberOfLines={multilineSubtitle ? undefined : 1}\n            >\n              {subtitle}\n            </Text>\n          ) : null}\n        </View>\n      </View>\n      {right && right()}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  leftContainer: {\n    flexDirection: \"row\",\n    flex: 1,\n  },\n  container: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n  },\n  textContainer: {\n    flex: 1,\n    justifyContent: \"center\",\n  },\n});\n\nexport default withTheme(Row);\n"]}