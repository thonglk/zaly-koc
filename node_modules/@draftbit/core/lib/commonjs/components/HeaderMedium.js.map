{"version":3,"sources":["HeaderMedium.tsx"],"names":["HeaderMedium","Icon","title","buttonText","icon","onPress","style","theme","colors","typography","headline6","strong","SEED_DATA","name","tag","description","category","COMPONENT_TYPES","header","preview_image_url","supports_list_render","props","group","GROUPS","data","label","formType","FORM_TYPES","string","propType","PROP_TYPES","STRING","defaultValue","editable","required","basic","ASSET","action","layout"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AASA;;;;;;;;AAYA,MAAMA,YAA6B,GAAG,CAAC;AACrCC,EAAAA,IADqC;AAErCC,EAAAA,KAFqC;AAGrCC,EAAAA,UAHqC;AAIrCC,EAAAA,IAJqC;AAKrCC,EAAAA,OAAO,GAAG,MAAM,CAAE,CALmB;AAMrCC,EAAAA,KANqC;AAOrCC,EAAAA,KAAK,EAAE;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV;AAP8B,CAAD,KAQhC;AACJ,sBACE,oBAAC,eAAD;AACE,IAAA,IAAI,EAAER,IADR;AAEE,IAAA,cAAc,EAAEQ,UAAU,CAACC,SAF7B;AAGE,IAAA,UAAU,EAAEF,MAAM,CAACG,MAHrB;AAIE,IAAA,KAAK,EAAET,KAJT;AAKE,IAAA,UAAU,EAAEC,UALd;AAME,IAAA,IAAI,EAAEC,IANR;AAOE,IAAA,OAAO,EAAEC,OAPX;AAQE,IAAA,KAAK,EAAEC;AART,IADF;AAYD,CArBD;;eAuBe,wBAAUN,YAAV,C;;;AAER,MAAMY,SAAS,GAAG,CACvB;AACEC,EAAAA,IAAI,EAAE,eADR;AAEEC,EAAAA,GAAG,EAAE,cAFP;AAGEC,EAAAA,WAAW,EACT,yEAJJ;AAKEC,EAAAA,QAAQ,EAAEC,uBAAgBC,MAL5B;AAMEC,EAAAA,iBAAiB,EAAE,oDANrB;AAOEC,EAAAA,oBAAoB,EAAE,KAPxB;AAQEC,EAAAA,KAAK,EAAE;AACLnB,IAAAA,KAAK,EAAE;AACLoB,MAAAA,KAAK,EAAEC,cAAOC,IADT;AAELC,MAAAA,KAAK,EAAE,OAFF;AAGLV,MAAAA,WAAW,EAAE,iBAHR;AAILW,MAAAA,QAAQ,EAAEC,kBAAWC,MAJhB;AAKLC,MAAAA,QAAQ,EAAEC,kBAAWC,MALhB;AAMLC,MAAAA,YAAY,EAAE,OANT;AAOLC,MAAAA,QAAQ,EAAE,IAPL;AAQLC,MAAAA,QAAQ,EAAE;AARL,KADF;AAWL/B,IAAAA,UAAU,EAAE;AACVmB,MAAAA,KAAK,EAAEC,cAAOC,IADJ;AAEVC,MAAAA,KAAK,EAAE,aAFG;AAGVV,MAAAA,WAAW,EAAE,sCAHH;AAIVW,MAAAA,QAAQ,EAAEC,kBAAWC,MAJX;AAKVC,MAAAA,QAAQ,EAAEC,kBAAWC,MALX;AAMVC,MAAAA,YAAY,EAAE,SANJ;AAOVC,MAAAA,QAAQ,EAAE,IAPA;AAQVC,MAAAA,QAAQ,EAAE;AARA,KAXP;AAqBL9B,IAAAA,IAAI,EAAE;AACJkB,MAAAA,KAAK,EAAEC,cAAOY,KADV;AAEJV,MAAAA,KAAK,EAAE,MAFH;AAGJV,MAAAA,WAAW,EAAE,yBAHT;AAIJW,MAAAA,QAAQ,EAAEC,kBAAWvB,IAJjB;AAKJyB,MAAAA,QAAQ,EAAEC,kBAAWM,KALjB;AAMJJ,MAAAA,YAAY,EAAE,IANV;AAOJC,MAAAA,QAAQ,EAAE,IAPN;AAQJC,MAAAA,QAAQ,EAAE;AARN,KArBD;AA+BL7B,IAAAA,OAAO,EAAE;AACPiB,MAAAA,KAAK,EAAEC,cAAOY,KADP;AAEPV,MAAAA,KAAK,EAAE,QAFA;AAGPV,MAAAA,WAAW,EAAE,uCAHN;AAIPkB,MAAAA,QAAQ,EAAE,IAJH;AAKPC,MAAAA,QAAQ,EAAE,KALH;AAMPR,MAAAA,QAAQ,EAAEC,kBAAWU,MANd;AAOPR,MAAAA,QAAQ,EAAEC,kBAAWC,MAPd;AAQPC,MAAAA,YAAY,EAAE;AARP;AA/BJ,GART;AAkDEM,EAAAA,MAAM,EAAE;AAlDV,CADuB,CAAlB","sourcesContent":["import * as React from \"react\";\nimport { withTheme } from \"../theming\";\nimport {\n  GROUPS,\n  COMPONENT_TYPES,\n  FORM_TYPES,\n  PROP_TYPES,\n} from \"@draftbit/types\";\nimport type { Theme } from \"../styles/DefaultTheme\";\nimport type { IconSlot } from \"../interfaces/Icon\";\n\nimport Header from \"./Header\";\nimport { StyleProp, ViewStyle } from \"react-native\";\n\ntype Props = {\n  title: string;\n  buttonText: string;\n  icon: string;\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  theme: Theme;\n} & IconSlot;\n\nconst HeaderMedium: React.FC<Props> = ({\n  Icon,\n  title,\n  buttonText,\n  icon,\n  onPress = () => {},\n  style,\n  theme: { colors, typography },\n}) => {\n  return (\n    <Header\n      Icon={Icon}\n      titleTypeStyle={typography.headline6}\n      titleColor={colors.strong}\n      title={title}\n      buttonText={buttonText}\n      icon={icon}\n      onPress={onPress}\n      style={style}\n    />\n  );\n};\n\nexport default withTheme(HeaderMedium);\n\nexport const SEED_DATA = [\n  {\n    name: \"Header Medium\",\n    tag: \"HeaderMedium\",\n    description:\n      \"A medium header with an optional touchable right aligned text and icon.\",\n    category: COMPONENT_TYPES.header,\n    preview_image_url: \"{CLOUDINARY_URL}/Header_HeadlineMediumIconText.png\",\n    supports_list_render: false,\n    props: {\n      title: {\n        group: GROUPS.data,\n        label: \"Title\",\n        description: \"Text to display\",\n        formType: FORM_TYPES.string,\n        propType: PROP_TYPES.STRING,\n        defaultValue: \"Title\",\n        editable: true,\n        required: false,\n      },\n      buttonText: {\n        group: GROUPS.data,\n        label: \"Button text\",\n        description: \"Right aligned button text to display\",\n        formType: FORM_TYPES.string,\n        propType: PROP_TYPES.STRING,\n        defaultValue: \"See All\",\n        editable: true,\n        required: false,\n      },\n      icon: {\n        group: GROUPS.basic,\n        label: \"Icon\",\n        description: \"Name of icon to display\",\n        formType: FORM_TYPES.icon,\n        propType: PROP_TYPES.ASSET,\n        defaultValue: null,\n        editable: true,\n        required: false,\n      },\n      onPress: {\n        group: GROUPS.basic,\n        label: \"Action\",\n        description: \"Action to execute when button pressed\",\n        editable: true,\n        required: false,\n        formType: FORM_TYPES.action,\n        propType: PROP_TYPES.STRING,\n        defaultValue: null,\n      },\n    },\n    layout: {},\n  },\n];\n"]}